<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Jérôme Gangneux]]></title>
    <link href="/atom.xml" rel="self"/>
    <link href="/"/>
    <updated>2023-02-11T15:17:24+00:00</updated>
    <id>/</id>
        <author>
        <name><![CDATA[jrmgx]]></name>            </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
                                                                                    <entry>
        <title type="html"><![CDATA[Installing Your Mastodon Instance With Docker]]></title>
        <link href="/2022/12/19/installing-mastodon-docker"/>
        <updated>2022-12-19T00:00:00+00:00</updated>
        <id>/2022/12/19/installing-mastodon-docker</id>
        <content type="html"><![CDATA[<p><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/monokai-sublime.min.css">
<script async defer src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"></script>
<!-- and it's easy to individually load additional languages -->
<!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/languages/go.min.js"></script> -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/languages/dockerfile.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/languages/twig.min.js"></script>
<script>document.addEventListener('DOMContentLoaded', () => hljs.highlightAll());</script>
</p>

<h1 id="installing-your-own-mastodon-instance-with-docker-compose">Installing Your Own Mastodon Instance With Docker Compose</h1>

<p>Mastodon is a free, open-source social networking platform that is designed to be decentralized and run on users' own servers.
In this post, we will go over how to install Mastodon on a server running Ubuntu 20.10 using Docker.</p>

<p>This tutorial is for people that have some knowledge of sysadmin (but not that much is required),
you should already have Docker + docker compose up and running.</p>

<p>I decided to write this down as the described process on the official doc was not up-to-date,
and also I have an opinionated setup using Traefik that I use for all my docker projects on my server.</p>

<p><em>Note: this installation is only valid for a one-person server (up to your whole family) but not a publicly open instance.
For that matter, you would have to tune multiple option for performance, add backup layer, storage, monitoring, etc.</em></p>

<p>This has been tested with Mastodon v4.0.2 on December 2022<br>
Docker version 20.10.12 and docker-compose version 1.29.2</p>

<h2 id="step-by-step-guide">Step-by-step guide</h2>

<h3 id="git-clone-mastodon">Git clone Mastodon</h3>

<p>Easy step, we start with cloning the mastodon project on our server<br>
<code>git clone https://github.com/mastodon/mastodon</code></p>

<p>Note: for some reason, the <code>--link</code> option in the <code>Dockerfile</code> did not work, so I simply removed it.</p>

<p>See my updated <code>Dockerfile</code> below:</p>

<pre><code class="language-dockerfile"># syntax=docker/dockerfile:1.4
# This needs to be bullseye-slim because the Ruby image is built on bullseye-slim
ARG NODE_VERSION=&quot;16.17.1-bullseye-slim&quot;

FROM ghcr.io/moritzheiber/ruby-jemalloc:3.0.4-slim as ruby
FROM node:${NODE_VERSION} as build

COPY --from=ruby /opt/ruby /opt/ruby

ENV DEBIAN_FRONTEND=&quot;noninteractive&quot; \
    PATH=&quot;${PATH}:/opt/ruby/bin&quot;

SHELL [&quot;/bin/bash&quot;, &quot;-o&quot;, &quot;pipefail&quot;, &quot;-c&quot;]

WORKDIR /opt/mastodon
COPY Gemfile* package.json yarn.lock /opt/mastodon/

RUN apt update &amp;&amp; \
    apt-get install -y --no-install-recommends build-essential \
        ca-certificates \
        git \
        libicu-dev \
        libidn11-dev \
        libpq-dev \
        libjemalloc-dev \
        zlib1g-dev \
        libgdbm-dev \
        libgmp-dev \
        libssl-dev \
        libyaml-0-2 \
        ca-certificates \
        libreadline8 \
        python3 \
        shared-mime-info &amp;&amp; \
    bundle config set --local deployment &#039;true&#039; &amp;&amp; \
    bundle config set --local without &#039;development test&#039; &amp;&amp; \
    bundle config set silence_root_warning true &amp;&amp; \
    bundle install -j&quot;$(nproc)&quot; &amp;&amp; \
    yarn install --pure-lockfile

FROM node:${NODE_VERSION}

ARG UID=&quot;991&quot;
ARG GID=&quot;991&quot;

COPY --from=ruby /opt/ruby /opt/ruby

SHELL [&quot;/bin/bash&quot;, &quot;-o&quot;, &quot;pipefail&quot;, &quot;-c&quot;]

ENV DEBIAN_FRONTEND=&quot;noninteractive&quot; \
    PATH=&quot;${PATH}:/opt/ruby/bin:/opt/mastodon/bin&quot;

RUN apt-get update &amp;&amp; \
    echo &quot;Etc/UTC&quot; &gt; /etc/localtime &amp;&amp; \
    groupadd -g &quot;${GID}&quot; mastodon &amp;&amp; \
    useradd -u &quot;$UID&quot; -g &quot;${GID}&quot; -m -d /opt/mastodon mastodon &amp;&amp; \
    apt-get -y --no-install-recommends install whois \
        wget \
        procps \
        libssl1.1 \
        libpq5 \
        imagemagick \
        ffmpeg \
        libjemalloc2 \
        libicu67 \
        libidn11 \
        libyaml-0-2 \
        file \
        ca-certificates \
        tzdata \
        libreadline8 \
        tini &amp;&amp; \
    ln -s /opt/mastodon /mastodon

COPY --chown=mastodon:mastodon . /opt/mastodon
COPY --chown=mastodon:mastodon --from=build /opt/mastodon /opt/mastodon

ENV RAILS_ENV=&quot;production&quot; \
    NODE_ENV=&quot;production&quot; \
    RAILS_SERVE_STATIC_FILES=&quot;true&quot; \
    BIND=&quot;0.0.0.0&quot;

# Set the run user
USER mastodon
WORKDIR /opt/mastodon

# Precompile assets
RUN OTP_SECRET=precompile_placeholder SECRET_KEY_BASE=precompile_placeholder rails assets:precompile &amp;&amp; \
    yarn cache clean

# Set the work dir and the container entry point
ENTRYPOINT [&quot;/usr/bin/tini&quot;, &quot;--&quot;]
EXPOSE 3000 4000
</code></pre>

<p><br>&nbsp;</p>

<h3 id="the-docker-compose.yml">The docker-compose.yml</h3>

<p>This file is quite different from the official one, it is opinionated, that's why I told you that this specific setup would only work for small instances.</p>

<p>Let's see which decision I made:</p>

<ul>
<li>I have a shell container for the solo purpose of executing commands</li>
<li>I use labels on the streaming and web container to configure Traefik</li>
<li>I use a volume for the public user data</li>
<li>I share the <code>.env.production</code> file across all containers</li>
</ul>

<p><code>docker-compose.yml</code></p>

<pre><code class="language-yaml">version: &#039;3.7&#039;

networks:
    traefik_default:
        external: true
        name: &quot;traefik_default&quot;

volumes:
    mastodon-postgres-data:
    mastodon-redis-data:
    mastodon-web-data:

services:
  db:
    restart: always
    image: postgres:14-alpine
    shm_size: 256mb
    env_file: .env.production
    networks:
      - traefik_default
    healthcheck:
      test: [&#039;CMD&#039;, &#039;pg_isready&#039;, &#039;-U&#039;, &#039;postgres&#039;]
    volumes:
      - mastodon-postgres-data:/var/lib/postgresql/data

  redis:
    restart: always
    image: redis:7-alpine
    env_file: .env.production
    networks:
      - traefik_default
    healthcheck:
      test: [&#039;CMD&#039;, &#039;redis-cli&#039;, &#039;ping&#039;]
    volumes:
      - mastodon-redis-data:/data

  web:
    build: .
    image: tootsuite/mastodon
    restart: always
    env_file: .env.production
    command: bash -c &quot;rm -f /mastodon/tmp/pids/server.pid; bundle exec rails s -p 3000&quot;
    networks:
      - traefik_default
    healthcheck:
      test: [&#039;CMD-SHELL&#039;, &#039;wget -q --spider --proxy=off localhost:3000/health || exit 1&#039;]
    depends_on:
      - db
      - redis
    volumes:
      - mastodon-web-data:/mastodon/public/system
    labels:
      - &quot;traefik.enable=true&quot;
      - &quot;traefik.http.routers.mastodon.rule=Host(`mastodon.test`)&quot;
      - &quot;traefik.http.routers.mastodon.tls=true&quot;
      - &quot;traefik.http.routers.mastodon-unsecure.rule=Host(`mastodon.test`)&quot;
      - &quot;traefik.http.services.mastodon.loadbalancer.server.port=3000&quot;

  # use like that: `docker-compose -f docker-compose.yml run --rm shell /bin/bash`
  shell:
    image: tootsuite/mastodon
    env_file: .env.production
    command: /bin/bash
    restart: &quot;no&quot;
    networks:
      - traefik_default
    depends_on:
      - db
      - redis
    volumes:
      - mastodon-web-data:/mastodon/public/system

  streaming:
    build: .
    image: tootsuite/mastodon
    restart: always
    env_file: .env.production
    command: node ./streaming
    networks:
      - traefik_default
    healthcheck:
      test: [&#039;CMD-SHELL&#039;, &#039;wget -q --spider --proxy=off localhost:4000/api/v1/streaming/health || exit 1&#039;]
    depends_on:
      - db
      - redis
    labels:
      - &quot;traefik.enable=true&quot;
      - &quot;traefik.http.routers.mastodon-api.rule=Host(`mastodon.test`) &amp;&amp; PathPrefix(`/api/v1/streaming`)&quot;
      - &quot;traefik.http.routers.mastodon-api.tls=true&quot;
      - &quot;traefik.http.routers.mastodon-api-unsecure.rule=Host(`mastodon.test`) &amp;&amp; PathPrefix(`/api/v1/streaming`)&quot;
      - &quot;traefik.http.services.mastodon-api.loadbalancer.server.port=4000&quot;

  sidekiq:
    build: .
    image: tootsuite/mastodon
    restart: always
    env_file: .env.production
    command: bundle exec sidekiq
    depends_on:
      - db
      - redis
    networks:
      - traefik_default
    volumes:
      - mastodon-web-data:/mastodon/public/system
    healthcheck:
      test: [&#039;CMD-SHELL&#039;, &quot;ps aux | grep &#039;[s]idekiq\ 6&#039; || false&quot;]
</code></pre>

<p><br>&nbsp;</p>

<h3 id="customize-our-.env.production-file">Customize our .env.production file</h3>

<p>Copy/past the <code>.env.production</code> file below and adapt fields for your needs.</p>

<pre><code class="language-shell"># General configuration
LOCAL_DOMAIN=mastodon.test
RAILS_ENV=production
NODE_ENV=production
DEFAULT_LOCALE=en

# Redirect to the first profile
SINGLE_USER_MODE=true

# Concurrency
WEB_CONCURRENCY=2
MAX_THREADS=5

# Redis
REDIS_HOST=redis
REDIS_PORT=6379

# Database
# Postgres side
POSTGRES_USER=mastodon
POSTGRES_DB=mastodon_production
POSTGRES_PASSWORD=change_me_fca92730f229c508e07d5d752076c0
# Application side
DB_HOST=db
DB_USER=mastodon
DB_NAME=mastodon_production
DB_PASS=change_me_fca92730f229c508e07d5d752076c0
DB_PORT=5432

# Secrets
SECRET_KEY_BASE=change_me_d53e9903ba93af1035bc8...
OTP_SECRET=change_me_ec7dc9e021ef40445d6fcc8c80...

# Web Push
VAPID_PRIVATE_KEY=invalid_61da0819c462fe4a5a130b41ba911f=
VAPID_PUBLIC_KEY=invalid_5af5c77a53508911dbebe1c9c...

# Sending mail
SMTP_SERVER=smtp.service.org
SMTP_PORT=587
SMTP_LOGIN=mastodon@service.org
SMTP_PASSWORD=invalid_c4d9c04ee31a28aaa3a20939
SMTP_FROM_ADDRESS=mastodon@mastodon.test

# File storage (optional)
S3_ENABLED=false
S3_BUCKET=files.example.com
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
S3_ALIAS_HOST=files.example.com

# IP and session retention
# Make sure to modify the scheduling of ip_cleanup_scheduler in config/sidekiq.yml
# to be less than daily if you lower IP_RETENTION_PERIOD below two days (172800).
IP_RETENTION_PERIOD=31556952
SESSION_RETENTION_PERIOD=31556952
</code></pre>

<p><br>&nbsp;</p>

<ul>
<li><code>LOCAL_DOMAIN=mastodon.test</code><br>You want to specify your domain here.
<br>&nbsp;</li>
<li><code>POSTGRES_PASSWORD=change_me_fca92730f229c508e07d5d752076c0</code><br>
You have to generate a unique password, you can use <code>openssl rand -hex 15</code> for that matter. This password is used twice in the file (see <code>DB_PASS</code>)
<br>&nbsp;</li>
<li><code>SECRET_KEY_BASE=change_me_d53e9903ba93af1035bc8...</code> and <code>OTP_SECRET=change_me_ec7dc9e021ef40445d6fcc8c80...</code><br>
You have to specify two unique secrets for those keys. You can do so easily with this command: <code>docker-compose -f docker-compose.yml run --rm shell bundle exec rake secret</code>
<br>&nbsp;</li>
<li><code>VAPID_PRIVATE_KEY=invalid_61da0819c462fe4a5a130b41ba911f=</code> and <code>VAPID_PUBLIC_KEY=invalid_5af5c77a53508911dbebe1c9c...</code><br>
You should generate the <code>VAPID</code> private and public keys with: <code>docker-compose -f docker-compose.yml run --rm shell bundle exec rake mastodon:webpush:generate_vapid_key</code>
<br>&nbsp;</li>
</ul>

<h3 id="initialize-the-database">Initialize the database</h3>

<p>From now, you can start and initialize the database.</p>

<p>First, run <code>docker-compose -f docker-compose.yml run --rm shell bundle exec rake db:setup</code><br>
when it's done you can continue with: <code>docker-compose -f docker-compose.yml run --rm shell bundle exec rake db:migrate</code></p>

<h3 id="create-your-user">Create your user</h3>

<p>Basically, the setup is done.
Now you can boot the whole project with: <code>docker-compose -f docker-compose.yml up -d</code>.<br>
Wait a bit, so everything is ready (you can check the status with <code>docker ps</code>)</p>

<p>Then create your first (and only) user: <code>docker-compose -f docker-compose.yml run --rm shell bin/tootctl accounts create NICKAME --email EMAIL@PROVIDER.LTD --confirmed --role Owner</code></p>

<p>Thereafter, you may want to disable registrations: <code>docker-compose -f docker-compose.yml run --rm shell bin/tootctl settings registrations close</code></p>

<h3 id="admin-tasks-for-later-use">Admin tasks for later use</h3>

<p>As you already saw, you have access to the <code>tootctl</code> utility for basic maintenance tasks: <code>docker-compose -f docker-compose.yml run --rm shell tootctl</code>.</p>

<p>Check the official doc if you need more details on it.</p>

<h2 id="web-server">Web server</h2>

<p>Most tutorials on the web will help you install and configure a web server, probably <em>nginx</em>, but I, personally, use <a href="https://traefik.io">Traefik</a> for that matter.</p>

<p>You can check out <a href="https://sleeplessbeastie.eu/2022/05/02/how-to-take-advantage-of-docker-to-install-mastodon/#install-web-server">sleeplessbeastie.eu/.../how-to-take-advantage-of-docker-to-install-mastodon</a>
where you will find how to configure nginx for your instance or <a href="https://gist.github.com/TrillCyborg/84939cd4013ace9960031b803a0590c4">gist.github.com/TrillCyborg</a> where you have some other options.</p>

<p>Still, I recommend you also have a look at traefik, it handles multiples docker projects running, SSL certificates, and more.
You may have noted some weird looking <code>labels</code> in the <code>docker-compose.yml</code> file: that's how I configured <em>Traefik</em> for Mastodon, and it works like a charm along my other docker-based project on that same server.</p>

<h2 id="you-made-it%21">You made it!</h2>

<p>That's it! You have successfully installed Mastodon on your server using Docker. You can now use your Mastodon instance to connect with other users and share your thoughts and ideas.</p>

<p>Enjoy!</p>
]]></content>
    </entry>
                    <entry>
        <title type="html"><![CDATA[WikiReveal]]></title>
        <link href="/2022/12/02/wikireveal"/>
        <updated>2022-12-02T00:00:00+00:00</updated>
        <id>/2022/12/02/wikireveal</id>
        <content type="html"><![CDATA[<h1 id="wikireveal">WikiReveal</h1>

<p>WikiReveal is a multilingual version of redactle.com published at <a href="https://wikireveal.com">wikireveal.com</a></p>

<blockquote>
  <p>It is a daily browser game where the user tries to determine the subject of a random obfuscated Wikipedia article chosen from Wikipedia's 10,000 Vital Articles (Level 4).</p>
</blockquote>

<p>Wikireveal embrace user contributions and open-source, with a focus on implementing multiples languages and letting anyone contribute easily.</p>

<p>If you are interested in contributing to the project, please check out the <a href="https://github.com/jrmgx/wikireveal.com">GitHub repository</a>.</p>

<p>For now, it has English, French and Spanish available!
<a href="https://wikireveal.com">Try a game and share you score!</a></p>

<p><em>Read more about the technical after the screenshot ...</em></p>

<p><section id="gallery">
    <h2>Gallery</h2>
    <div class="mx-auto max-w-2xl mt-6">
        <div class="text-center">Click for more screenshots</div>
        <div class="shadow-2xl relative">
                        <div class="mySlides"><img class="image1 w-full w-full" src="/images/projects/wikireveal/01.png"></div>
                        <div class="mySlides"><img class="image2 w-full w-full" src="/images/projects/wikireveal/02.png"></div>
                        <span class="absolute left-0 inset-y-0 flex items-center px-4 dark:text-pink-600 text-pink-500 cursor-pointer text-3xl font-extrabold" style="z-index: 11;" onclick="plusSlides(-1)">❮</span>
            <span class="absolute right-0 inset-y-0 flex items-center px-4 dark:text-pink-600 text-pink-500 cursor-pointer text-3xl font-extrabold" style="width: 100%;z-index: 10;justify-content: flex-end;" onclick="plusSlides(1)">❯</span>
        </div>
    </div>

    <script>
    var slideIndex = 1;
    showSlides(slideIndex);

    function plusSlides(n) { showSlides(slideIndex += n); return false; }
    function showSlides(n) {
        var i;
        var slides = document.getElementsByClassName("mySlides");
        if (n > slides.length) {
            slideIndex = 1
        }
        if (n < 1) {
            slideIndex = slides.length
        }
        for (i = 0; i < slides.length; i++) {
            slides[i].style.display = "none";
        }
        slides[slideIndex - 1].style.display = "block";
    }
    </script>
</section>
</p>

<h2 id="technical-stack">Technical Stack</h2>

<p>The project was kind of fun to implement. I did not want to have a server running it, so I decided to took advantage of GitHub pages.</p>

<p>The idea was, not to build a web application as usual, but instead build a static page generator. Wikireveal being a daily puzzle it was meant to be. Plus, this version — as opposed to other copies — does not have any user data stored, a perfect match for a static website.</p>

<p>Side effect, it is fully private; no data collecting, no ads; that was something I wanted too.</p>

<h3 id="php-and-symfony">PHP and Symfony</h3>

<p>As you can imagine I went for my tools of predilection: PHP with Symfony.</p>

<p>I build a very simple controller, with some services to fetch the page on Wikipedia and clean the article of the day for the gameplay (removing link, images, etc.).
I added a PHP interface for implementing languages, so anyone can create a new one with a few lines of code. Then the controller is called via a symfony command and the result saved into a basic HTML file.</p>

<p>I decided to use a controller and then render it in a second step. That way you can have a local version for developing, I thought it was a good approach to ease feature iteration.</p>

<p>Thanks to that simple base, I could use GitHub actions to run the symfony command <a href="https://github.com/jrmgx/wikireveal.com/actions">every day</a>. And voilà.</p>

<h2 id="conclusion">Conclusion</h2>

<p>There are lots of things that can be improved. The code could be made even more flexible. But for now, I'm happy with the result.</p>

<p><a href="https://wikireveal.com">Let's play your first game!</a></p>

<p><em>Note: this post has been written with some help from an AI.</em></p>
]]></content>
    </entry>
                    <entry>
        <title type="html"><![CDATA[Geek Stuff]]></title>
        <link href="/2022/11/20/geek-stuff"/>
        <updated>2022-11-20T00:00:00+00:00</updated>
        <id>/2022/11/20/geek-stuff</id>
        <content type="html"><![CDATA[<h1 id="geek-stuff">Geek Stuff</h1>

<p>Two stupid yet useful things I've done recently on my local setup.</p>

<h2 id="languagetool-desktop-app-spoofing">LanguageTool Desktop App spoofing</h2>

<p>I like <a href="languagetool.org">LanguageTool</a>: a multilingual grammar, style, and spell checker. <br>
It is a great help for me, in both English and French.</p>

<p>I have the browser extension setup on each of my browser. But I was not so happy about the text I wrote been sent to servers.
Fortunately, LanguageTool is open source, and they provide all the needed info about setting up a server.</p>

<p>So of course I did it and install a server on my local machine.
Then on the browser extension they allow you to specify a custom server URL.
Thank you for being so kind and open.</p>

<p>That setup worked like a charm for a while.
But I needed more than having LanguageTool in the browser!
Those kinds of tool become quickly a must-have.</p>

<p>Luckily, LanguageTool is actually working on a <a href="https://languagetool.org/mac-desktop">desktop app</a>.
This app allows you to have the spell checker in desktops apps, not only the browser. Nice!</p>

<p>Unfortunately, the same privacy question emerge, and that time, the desktop app does not provide a way to specify an external server.
I was having mixed feelings: wanting the tool really bad, but without sending my email/notes content to an external server.</p>

<p><strong>Enters the geek inside me!</strong></p>

<p>I decided to spoof the official language tool server with my local version.</p>

<p>The trick is straightforward — even if it took me some time to get right —
I updated my <code>/etc/hosts</code> file to have <code>api.languagetool.org</code> pointing on my local machine and then set up a <code>docker</code> + <code>mkcert</code> + <code>traefick</code> stack to make the spoof complete.
Luckily, the official API has the same endpoints as the open-source version, so it worked effortlessly.</p>

<p>I now have LanguageTool Desktop app working with my local version of the server, and no data leaves my computer!</p>

<h2 id="shared-browser-extension-settings-across-multiple-browser">Shared browser extension settings across multiple browser</h2>

<p>Recently, I discovered the <a href="https://darkreader.org">darkreader.org</a> browser extension.<br>
It allows you to get a dark mode version of any websites, it works by adding some custom styling to the page. That's a nice one to have.</p>

<p>Problem is, the extension changes all websites, even the ones that already have a dark theme — or are dark by nature —
fortunately a blacklist feature is present in the extension, so you can disable the extension on specific domains.</p>

<p>Still, I got annoyed because, as you can imagine, I'm using multiple browsers with multiple accounts (work, personal, etc.).
So, each browser has its own instance of the extension; thus, each one had different settings, and so I had to blacklist each same website on each browser/account.
How is this acceptable?</p>

<p><strong>The geek enters again!</strong></p>

<p>This extension is open source, that's a chance.<br>
I decided to build a small local server that expose a basic key/value API on top of a SQLite database.
Then I updated the extension, so it uses that localhost API instead of the browser storage.</p>

<p>And voilà! I now have multiple instances of that same extension, but with synchronized settings.<br>
The funny side effect is that I can see all the settings this extension is using in my SQLite database.</p>

<h2 id="conclusion">Conclusion</h2>

<p>I love to play those little games.</p>

<p>Having a perfect local setup allows me to be more productive.
It's like polishing your tool to get a better work done.
Well, I can't help, I'm a geek.</p>

<p><em>Note: Those tricks are not available because they are too specific to my setup, but also, let's be honest, they are not the most beautiful code I've written. If you are interested in some details, contact me.</em></p>
]]></content>
    </entry>
                    <entry>
        <title type="html"><![CDATA[web3 (Avril/mai 2022)]]></title>
        <link href="/2022/10/22/web3"/>
        <updated>2022-10-22T00:00:00+00:00</updated>
        <id>/2022/10/22/web3</id>
        <content type="html"><![CDATA[<h1 id="web3-avril%2Fmai-2022">web3 (avril/mai 2022)</h1>

<p>J'ai passé un mois dans le monde du web3 pour vous : voici mon avis d'un point de vue de développeur.</p>

<p><small class="text-sm">Notez qu'entre-temps, il y a eu un krach des crypto monnaies et NFT et que ce sujet n'est plus trop d'actualité. Ça m'apprendra à tarder à publier mes articles.</small></p>

<h2 id="pourquoi-%3F">Pourquoi ?</h2>

<p>J'y suis allé sincèrement pour me tenir informé des évolutions techniques, mais également en espérant y découvrir quelque chose. Et, sans trop d'à priori, car comme vous le savez sans doute, je ne suis pas contre les crypto comme monnaie non étatique, <a href="https://jerome.gangneux.net/2017/06/08/state-of-bitcoin-mid-2017/">voir un précédent article</a>. J'imagine que ça peut servir dans certains pays.</p>

<p>Concernant l'état actuel de ce qui est appelé le web3, je suis beaucoup plus critique. Ce qui ne veut pas dire que rien n'en restera.</p>

<h2 id="le-saut">Le saut</h2>

<p>Concrètement, j'ai appris le langage Solidity (pour développer sur la blockchain Ethereum) et déployé un smart-contract. De plus, j'ai parlé avec des communautés en suivant leurs projets divers et variés (mais pas tant varié que ça, plutôt des NFT).</p>

<h2 id="la-fi%C3%A8vre">La fièvre</h2>

<p>Actuellement, ce que je vois, c'est que c'est le far-west. L'analogie tient autant pour le côté sans foi ni loi, mais aussi (et surtout) pour l'aspect fièvre de l'or. Cet aspect est important, il participe à l'émulation des uns et des autres (ou au FOMO selon votre point de vue).</p>

<p>Pour être honnête avec vous, j'ai moi-même eu la fièvre un temps. La question que tout le monde se pose est : « Pourquoi je n'arriverai pas à gagner plein d'argent moi aussi ? »
En y passant du temps, j'ai bien vu que l'on nous mentait... qui ? Personne. C'est le grand mensonge décentralisé. À défaut de décentraliser quoi que ce soit d'autre.</p>

<p>Les quelques gagnants font leur promotion et les autres veulent leurs parts du gâteau.</p>

<h2 id="la-bulle">La bulle</h2>

<p>Il y a aussi une bulle évidente, ça sent l'argent magique à plein nez (notons que ça s'est bien calmé à l'heure où j'écris ces lignes). Tout le monde ferme les yeux, personne ne veut regarder les vrais métriques. Quand un projet se lance, les gens vont s'extasier sur des chiffres qui ne veulent rien dire plutôt que de compter combien de personnes utilisent le projet et comment le projet gagne de l'argent. Et, si jamais un projet parle d'argent, il parlera en fait de token ou d'argent du futur, rien de tangible.</p>

<p>D'ailleurs, 90 % des projets sont des NFT qui se ressemblent autant dans leur concept que dans leur art. Il y a plusieurs collections de singe par exemple (quelle drôle de phrase je viens d'écrire).</p>

<p>Quand c'est possible, les projets essaient de s'accrocher au "metaverse" à venir. Le problème, c'est que ce "metaverse" n'existe pas, c'est encore qu'un concept (et qui à mon avis est aussi flou que lointain dans le temps).</p>

<h2 id="bon-point">Bon point</h2>

<p>Il y a quand même un point intéressant, je trouve, c'est le wallet (en tant que concept et technique). Il permet à un utilisateur de se connecter à des services sans créer d'identifiant et mot de passe. Le wallet permet aussi de chiffrer tout de bout en bout si besoin et facilement. Si les utilisateurs prennent ce réflexe plutôt que de se connecter via des plateformes centralisées telles que Google ou Facebook, c'est un bon point.</p>

<h2 id="scam-d%C3%A9centralis%C3%A9">Scam décentralisé</h2>

<p>Qui dit Far West, dit, dans le jargon adapté d'internet : scam.
Cas pratique : vous êtes convaincu et que vous voulez acheter un NFT, disons qu'une collection vous plaise. Vous allez sur le serveur Discord du projet et vous attendez des nouvelles. Un jour, vous recevez un message privé qui semble venir du serveur en question et votre renvoi vers une page pour récupérer votre NFT. Sauf qu'étant débutant, vous ne savez pas réellement quelle est la procédure normale, pas de site officiel pour les projets ou des domaines peu communs… Comment faire la différence avec un scam ?</p>

<p>Je l'ai vu en action et je peux vous dire que beaucoup de gens doivent tomber dans le piège. À qui faire une réclamation après ? Personne.</p>

<p>C'est décentralisé, personne n'est responsable.</p>

<h2 id="pour-les-d%C3%A9veloppeurs.">Pour les développeurs.</h2>

<p>Les smart-contracts paraissent excitants pour un temps, le temps de l'apprentissage, puis finalement les limitations sont monstrueuses et les frais de transaction (nécessaire pour exécuter le code du smart-contract) trop importants. Certes, les créateurs de chaine travaillent sur ce point, mais en multipliant les chaines et en créant maintenant diverses incompatibilités.</p>

<p>La promesse de décentralisation est aussi limitée par le fait qu'il faille (pour vous simplifier la tâche) utiliser des plateformes web classiques (Alchemy par exemple) pour que votre app web3 se connecte à la blockchain. Le tout donne un air de centralisation et des frais supplémentaires pour les développeurs, car ces services tiers sont payants.</p>

<h2 id="pas-que-des-nft">Pas que des NFT</h2>

<p>Il y a d'autres projets plus ou moins intéressant sur la blockchain. La DeFi (decentralized finance) par exemple, qui au-delà du trading sauvage pourrait servir à faire des micros emprunts. Et, bien d'autres concepts qui restent minoritaires.</p>

<h2 id="le-vrai-d%C3%A9centralis%C3%A9">Le vrai décentralisé</h2>

<p>Si vous voulez participer à une expérience décentralisée, pourquoi ne pas juste utiliser l'email (de préférence de chez <a href="https://proton.me">Proton</a> mail). Le bon vieux protocole email est un parfait exemple de web décentralisé (sous réserve que l'on ne soit pas chez Gmail).</p>

<p>Mieux, soyez fou et installez un serveur web avec votre site dessus, ce serveur peut même être installé chez vous (plutôt que dans le cloud). Du bon vieil internet tout simplement. Ou, plus accessible, un Wordpress sur votre nom de domaine, ce sera toujours un bon pied de nez au web centralisé d'aujourd'hui (à savoir l'internet des plateformes GAFAM qui vous spolient votre contenu en échange de cœurs ou de pouces).</p>

<p>Il existe tout un tas de façon d'être décentralisé, il faut juste se le rappeler : ça s'appelle Internet (hors GAFAM). Le web1 en quelque sorte.</p>

<p>Et, si vous voulez être à la pointe de ce qui se fait : il y a les vraies expériences décentralisées telles que :</p>

<ul>
<li><a href="https://ipfs.tech">IPFS</a> : protocole de stockage de fichier décentralisé, très utilisé en web3 mais pas lié ni au web3 ni au crypto.</li>
<li><a href="https://solidproject.org">Solid Project</a> : proposition de nouveaux standards web qui remettent la donnée au centre du protocole pour plus de contrôle de la part de l'utilisateur.</li>
</ul>

<h2 id="finalement">Finalement</h2>

<p>J'ai pris un paracétamol, une bonne nuit de sommeil et c'est passé.<br>
En espérant qu'il restera de bonnes choses de cette expérience web3 !</p>
]]></content>
    </entry>
                    <entry>
        <title type="html"><![CDATA[Duolingo Flashcards]]></title>
        <link href="/2022/07/03/duolingo-to-flashcards"/>
        <updated>2022-07-03T00:00:00+00:00</updated>
        <id>/2022/07/03/duolingo-to-flashcards</id>
        <content type="html"><![CDATA[<h1 id="duolingo-flashcards">Duolingo Flashcards</h1>

<h2 id="long-intro">Long Intro</h2>

<p>You may — or may not — know me, but let me tell you one of my passion in life: connect everything together.</p>

<p>When I was young — let's say 15 — I tried to connect a landline phone to my computer sound card, learning a lesson here: landline in France carry a bit of electricity and my computer did not like it. I had to play without sound for a while.</p>

<p>I also have a project in the work about connecting plants to synthesizers, so we could hear them grow — but I have yet to find more time to work on it.</p>

<p>And of course, a part of my job is to connect programs (APIs) together to build products and services.</p>

<p>Anyway, today I'm going to talk about a more down to earth usage, hacky one, but a need I had.</p>

<p>I'm trying to learn a new language (Spanish) mostly for fun and brain practice. And for that, I'm using the app Duolingo. It's good (for now) but it does not have a feature I love: flashcards.</p>

<blockquote>
  <p>A flashcard is a card bearing information on both sides, which is intended to be used as an aid in memorization. Each flashcard bears a question on one side and an answer on the other. Flashcards are often used to memorize vocabulary, historical dates, formulas or any subject matter that can be learned via a question-and-answer format. Flashcards can be virtual (part of a flashcard software), or physical. <a href="https://en.wikipedia.org/wiki/Flashcard" title="❤️ wikipedia">Wikipedia</a></p>
</blockquote>

<p>On the other side, it exists free flashcard apps like: Ankiapp that allows user to make their own flashcard set, and even in that case, import CSV into it.</p>

<p>Say no more, let's connect those together.</p>

<h2 id="connect-everything">Connect Everything</h2>

<p>First, I need an API point on the Duolingo part, but unfortunately, it does not exist… The internet being a magic place full of resources, I found someone working on an unofficial API. Thank you, <a href="#">@KartikTalwar</a>, for <a href="#">github.com/KartikTalwar/Duolingo</a>.</p>

<p>I took me sometime to explore the API (without doc) and found some endpoints that would do the job.</p>

<p>The next step is the easy one, take my favorite scripting language PHP and build a CSV file from this info. After a bit of test, it works as expected, I cleaned up the whole project and decided to put it online, so you could use it too.</p>

<p>Find it here <a href="https://github.com/jrmgx/duo-vocabulary">github.com/jrmgx/duo-vocabulary</a> you have all the information to use it on the repository. It's easy with docker, you don't have to install anything <code>docker run jrmgx/duo-vocabulary [parameters] &gt; output.csv</code></p>

<h2 id="limitations">Limitations</h2>

<ul>
<li>It has some specific hard-coded rules to remove feminine and plural words, but those rules only work for Spanish (the language I'm learning right now).</li>
<li>Duolingo does not provide an official API, for that reason, it may stop working at anytime (without any way to fix it).</li>
<li>From what I understood, calls to <code>dictionary/hints</code> endpoint are limited in payload size, it may have to be split at some point, but for now, with my current usage it works like that.</li>
</ul>

<h2 id="update">Update</h2>

<p>I made a <a href="https://telegram.me/FlashCartesBot?start=perso">telegram bot</a> that can handle those CSV to be used as a flashcard bot</p>

<p>Enjoy!</p>
]]></content>
    </entry>
                    <entry>
        <title type="html"><![CDATA[Performant tooling with Docker and macOS]]></title>
        <link href="/2022/05/03/performant-tooling-docker-macos"/>
        <updated>2022-05-03T00:00:00+00:00</updated>
        <id>/2022/05/03/performant-tooling-docker-macos</id>
        <content type="html"><![CDATA[<h1 id="performant-tooling-with-docker-and-macos">Performant tooling with Docker and macOS</h1>

<p>Developers love performant tools, I mean, developers NEED performant tools!</p>

<p>I'm not going to talk about whether you should use macOS to develop.<br>
Personally, I do, not gonna argument here.</p>

<p>Problem is, I use Docker, and it's sad that this sentence starts with "problem".<br>
Docker has helped the dev community and I like this tools, I mean, I like the idea and the possibilities it offers.</p>

<p><strong>But on macOS it's slow as hell.</strong></p>

<p>To be honest, it's not slow in every situation but only some, unfortunately the one that are mostly the main usage of Docker in a development environment.<br>
<a href="https://github.com/docker/for-mac/issues/77">This is not new as you can see on this issue reported in 2016</a>.</p>

<p>Issues are related to volume performance, specifically the way volumes are mounted on macOS.<br>
And for applications which perform many I/O disk operations, it can become almost not usable.</p>

<p>Unfortunately, I'm in that case, being a web/symfony developer I handle projects with many dependencies/cache and thus many I/O.</p>

<p>I heard that Docker decided to have a <a href="https://www.docker.com/blog/speed-boost-achievement-unlocked-on-docker-desktop-4-6-for-mac/">look at this issue</a>.<br>
It took them far too much time to do so, but that's another topic.<br>
Their effort seems to go somewhere for some people, not so much for me.</p>

<p>Of course, I tried every option before, and trust me on this one.<br>
Being <a href="http://docker-sync.io">docker-sync</a> (which was the best tradeoff), mutagen, VM with docker inside, and other fancy other attempts.</p>

<p>And today, I'm thrilled to tell you that I compiled the best of all those errands into a solution that's quite acceptable.<br>
It is the solution I use for all my projects, and so far, it has been a pleasure again to use Docker on macOS.</p>

<p>This solution is heavily inspired by docker-sync and I basically removed a layer, and thus it gives more control on the whole process.<br>
It can be resumed like this: don't use <code>-v</code> ever, instead make specific docker volumes and synchronize them with <code>unison</code> &lt;3</p>

<p>Let's dive in, code is coming.</p>

<h2 id="part-one%3A-building">Part one: building</h2>

<h3 id="installing-unison-local%2Fdocker">Installing unison local/docker</h3>

<p>We want to install unison on our local machine, it will then connect to our container that has the mounted volume.</p>

<p><code>$ brew install unison</code></p>

<p>Then get the version, as it is important to have the same version on both the client (your local machine) and the server (the docker container with the volume).</p>

<pre><code class="shell">$ unison -version
unison version 2.52.0 (ocaml 4.12.0)
</code></pre>

<p>Now we build a docker image with <code>unison</code> at the same version (both unison and ocaml version should match)</p>

<p><code class="filepath">Dockerfile</code></p>

<pre><code class="language-dockerfile">FROM ubuntu:20.04

ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update &amp;&amp; \
    apt-get install -y --no-install-recommends \
        curl wget build-essential coreutils openssh-server git bash \
        inotify-tools monit supervisor rsync ruby tzdata \
    &amp;&amp; rm -rf /var/lib/apt/lists/* /var/cache/apt/*

# Install OCAML: adapt version number from your own local setup
RUN wget http://caml.inria.fr/pub/distrib/ocaml-4.12/ocaml-4.12.0.tar.gz \
    &amp;&amp; tar xvf ocaml-4.12.0.tar.gz -C /tmp \
    &amp;&amp; cd /tmp/ocaml-4.12.0 \
    &amp;&amp; ./configure \
    &amp;&amp; make world \
    &amp;&amp; make opt \
    &amp;&amp; umask 022 \
    &amp;&amp; make install \
    &amp;&amp; make clean \
    &amp;&amp; rm -rf /tmp/ocaml-4.12.0 \
    &amp;&amp; rm /ocaml-4.12.0.tar.gz

# Install Unison: adapt version number from your own local setup
RUN curl -L https://github.com/bcpierce00/unison/archive/v2.52.0.tar.gz | tar zxv -C /tmp \
    &amp;&amp; cd /tmp/unison-2.52.0 \
    # needed for &lt; 2.51.4 with OCALM 4.12 - see https://github.com/bcpierce00/unison/pull/480
    # and https://github.com/Homebrew/homebrew-core/blob/HEAD/Formula/unison.rb#L13
    # &amp;&amp; curl https://github.com/bcpierce00/unison/commit/14b885316e0a4b41cb80fe3daef7950f88be5c8f.patch?full_index=1 -o patch.diff \
    # &amp;&amp; ([[ &quot;2.52.0&quot; == &quot;2.51.3&quot; ]] &amp;&amp; git apply patch.diff); \
    # rm patch.diff \
    &amp;&amp; sed -i -e &#039;s/GLIBC_SUPPORT_INOTIFY 0/GLIBC_SUPPORT_INOTIFY 1/&#039; src/fsmonitor/linux/inotify_stubs.c \
    &amp;&amp; make UISTYLE=text NATIVE=true STATIC=true \
    &amp;&amp; cp src/unison src/unison-fsmonitor /usr/local/bin \
    &amp;&amp; rm -rf /tmp/unison-2.52.0

# These can be overridden later
ENV TZ=&quot;Europe/Paris&quot; \
    LANG=&quot;C.UTF-8&quot; \
    UNISON_DIR=&quot;/data&quot; \
    HOME=&quot;/root&quot;

# Install SSH packages
RUN apt-get update &amp;&amp; \
    apt-get install openssh-server -y --no-install-recommends &amp;&amp; \
    rm -rf /var/lib/apt/lists/* /var/cache/apt/*

RUN mkdir -p /run/sshd
RUN mkdir -p /root/.ssh

# You should insert your public key in this file
COPY authorized_keys /root/.ssh/authorized_keys

# Editing the SSHD config file
RUN echo &#039;PermitRootLogin yes&#039; &gt;&gt; /etc/ssh/sshd_config

# Make port 22 available to the world outside this container
EXPOSE 22

# Run SSHD when the container starts
CMD [&quot;/usr/sbin/sshd&quot;, &quot;-D&quot;]
</code></pre>

<p>You may need to adapt a bit, see comments</p>

<h3 id="create-the-docker-volume-and-container">Create the Docker volume and container</h3>

<p><code>docker volume create --name your-project-name-volume</code></p>

<p><code>docker create -h your-project-name --name your-project-name-sync -it -p PORT:22 -v your-project-name-volume:/data your/image /bin/bash</code>
Replace <code>PORT</code> with some available port on your machine.</p>

<h2 id="part-two%3A-usage">Part two: usage</h2>

<h3 id="configuration-in-your-docker-compose">Configuration in your docker-compose</h3>

<p>Now, everywhere you need those project files, instead of linking the local filesystem with <code>-v</code> or <code>volumes</code> you reference <code>your-project-name-volume</code> instead!</p>

<p><code class="filepath">docker-compose.yml</code></p>

<pre><code class="language-yaml">version: &quot;3.3&quot;
services:

    apache:
        build: docker/apache
        volumes:
            - &quot;your-project-name-volume:/var/www&quot;
# Instead of
#        volumes:
#            - &quot;./:/var/www&quot;

volumes:
    your-project-name-volume:
        external: true
</code></pre>

<h3 id="start-the-container-and-sync">Start the container and sync</h3>

<p><code>docker start your-project-name-sync</code></p>

<p><code>cd PROJECT</code>
<code>unison . ssh://root@127.0.0.1:PORT//data -repeat=watch -auto -batch -ignore 'Path .git' -ignore 'Path var'</code>
Replace <code>PORT</code> with some available port on your machine.</p>

<p>Of course, you can put that into a bash script:</p>

<pre><code class="bash">#!/bin/bash

docker start your-project-name-sync &amp;&amp; \
unison ./ ssh://root@127.0.0.1:PORT//data -repeat=watch -auto -batch -ignore 'Path .git' -ignore 'Path var'
</code></pre>

<h2 id="tradeoffs">Tradeoffs</h2>

<p>This solution comes with some tradeoffs,
mainly the fact that your code base is duplicated on a Docker volume, thus duplicating the disk space required.
The first start will take some time too as it needs to synchronize the whole project.</p>

<p>I reckon, it's a bit of configuration to do, but to me that works so well that I consider those a detail.</p>
]]></content>
    </entry>
                    <entry>
        <title type="html"><![CDATA[The myth of overnight success]]></title>
        <link href="/2022/03/23/the-myth-of-overnight-success"/>
        <updated>2022-03-23T00:00:00+00:00</updated>
        <id>/2022/03/23/the-myth-of-overnight-success</id>
        <content type="html"><![CDATA[<p>This is my personal testimony against overnight success and all those marketing stories that people try to sell — most of the time literally with e-books or other products —.</p>

<p>In 2019, I sold Thread Reader App, and that is some success in my point of view.</p>

<p>I started to develop the project as a side project, or to be more correct as a support for my videos tutorials, which was the side project. Then it went viral, and I had the chance to make it work.</p>

<p>For some, it looks like an overnight success, but it was not.
Before having that lucky shoot, I made, or participated in, plenty of projects.</p>

<h3 id="most-of-it-failed.">Most of it failed.</h3>

<p>This list is here to show you that it needed <strong>numerous</strong> tries.<br>
Then you can understand that, before getting somewhere, you may have to try very hard.</p>

<p>This list only contain projects that I wanted to make money with.<br>
Note, when I say "made 0€" it really means, cost me a bunch of money + my own time.</p>

<style>.ar { display: inline-block; margin: 0 0.5rem 0 1rem; }</style>

<ul>
<li>Randomkiss (2007): Facebook app to meet random new people, made 0€</li>
<li>Shypic (2008): Event-based picture sharing website, did not make it to product</li>
<li>Allobars (2010): <a href="/2010/02/01/allobars">see dedicated page</a>, made 0€</li>
<li>Notes.git (2011): Note-taking app, made 0€</li>
<li>Citroon (2011): <a href="/2011/09/01/citroon">see dedicated page</a>, made 0€</li>
<li>Coffret cadeau addict (2011): Gift box comparator, made 0€</li>
<li>Cosmoz (2012): <a href="/2012/04/01/cosmoz">see dedicated page</a>, made 0€</li>
<li>Drink different (2012): Get good wine monthly subscription, did not make it to product</li>
<li>Ping url (2012): Check if a given URL is live, did not make it to product</li>
<li>Dailymood (2013): Every day, enter your mood and get yearly statistics, did not make it to product</li>
<li>What to buy with bitcoins (2013): Blog about bitcoin, made 0€</li>
<li>Newsbid (2013): Crowdfunding for journalists, did not make it to product</li>
<li>Creamly (2013): Snapchat clone, made 0€</li>
<li>My laboratory (2013): <a href="/2012/06/01/mylaboratory">see dedicated page</a><br>
<span class="ar">→</span> 300k downloads, made some bucks, not much.</li>
<li>Chkthatprice (2014): Price change alert for any web shop, made 0€</li>
<li>Coloriage (2014): App to allow kids to coloriage, did not make it to product</li>
<li>Patience (2014): Casual spelling game, did not make it to product</li>
<li>A bunch of casual games (2014): made with the collective <a href="/2012/03/01/weheartprojects">weheartprojects</a><br>
<span class="ar">→</span> made few bucks in ads.</li>
<li>Budeal (2014): <a href="/2014/10/01/budeal">see dedicated page</a><br>
<span class="ar">→</span> Spent almost a year full-time, got some traction, made a few euros but costed twice more.</li>
<li>ilovepromo (2014): <a href="/2014/12/01/ilovepromo">see dedicated page</a>.<br>
<span class="ar">→</span> Made some bucks, not much.</li>
<li>Bonne Nouvelle (2015): Connected photo frame, did not make it to product</li>
<li>Coach Sportif Video (2015): Create a video montage for your own sport coaching, did not make it to product</li>
<li>Newswipe (2015): Newsreader with swiping like tinder, made 0€</li>
<li>Mr. Smartphone (2015): <a href="/2015/07/01/mrsmartphone">see dedicated page</a><br>
<span class="ar">→</span> Good call but a bit late, I was burning out.</li>
<li>RSS Offline (2015): RSS reader with offline capability, made 0€</li>
<li>Filter for Slack (2017): <a href="/2017/01/01/filter-for-slack">see dedicated page</a>, made 0€</li>
<li>Android VR Webview (2017): <a href="/2017/02/01/android-vr-webview">see dedicated page</a>.<br>
<span class="ar">→</span> Made some euros, not worth the trouble</li>
<li>Thread Reader App (2017): <strong><a href="/posts/category/threadreader/">At least something happened!</a></strong></li>
</ul>

<p>And then after I started a bunch of new <strike>failures</strike> projects, namely: snooze.me, Glitch App, toFeed, Artillery Royale (the latter cost me 10k€, and I got nothing from it).</p>

<p>Ten years, about 33 projects, only one lucky shoot…</p>

<p>There is no overnight success.</p>
]]></content>
    </entry>
                    <entry>
        <title type="html"><![CDATA[(Re)discover XPath selectors]]></title>
        <link href="/2022/02/01/re-discover-xpath-selectors"/>
        <updated>2022-02-01T00:00:00+00:00</updated>
        <id>/2022/02/01/re-discover-xpath-selectors</id>
        <content type="html"><![CDATA[<p>See more at (jolicode.com/blog/re-discover-xpath-selectors)[https://jolicode.com/blog/re-discover-xpath-selectors]</p>
]]></content>
    </entry>
                    <entry>
        <title type="html"><![CDATA[PHP Clone All The Things]]></title>
        <link href="/2022/01/05/php-clone-all-the-things"/>
        <updated>2022-01-05T00:00:00+00:00</updated>
        <id>/2022/01/05/php-clone-all-the-things</id>
        <content type="html"><![CDATA[<p>See more at (jolicode.com/blog/php-clone-all-the-things)[https://jolicode.com/blog/php-clone-all-the-things]</p>
]]></content>
    </entry>
                    <entry>
        <title type="html"><![CDATA[Artillery Royale going free and open source!]]></title>
        <link href="/2021/11/01/artillery-royale-going-free-and-open-source"/>
        <updated>2021-11-01T00:00:00+00:00</updated>
        <id>/2021/11/01/artillery-royale-going-free-and-open-source</id>
        <content type="html"><![CDATA[<p>Hello, dear friends of Artillery Royale.</p>

<p>As you may have already understood, I decided to pause on the development of the game.</p>

<p><strong>About me:</strong> I'm quite sad about it but also very proud of the work done.
I did not find the resources to make it work, both in terms of motivation and finances.
Because this is not my first project, I now know when it is time to stop and prevent myself to burn.</p>

<p>So it was a difficult decision, but I have no regrets.</p>

<p><strong>Figures:</strong> I have spent about 12 months on that project and more than 10,000 euro of my own money (not even counting the time I spent). The game made US$ 80 of revenues (quite far from any benefits).</p>

<p>Now I have found a classic job to consolidate my finances (to be honest, that's not the only reason, but the rest is personal).</p>

<p><strong>Next:</strong> About Artillery Royale, it is now free on steam!
And I am releasing the source code as open source.</p>

<p>Why so? First, I think that code can help some people to learn a bit in game development.<br>
Also, if someone has a good feeling about the game, they may continue to work on it.</p>

<p>Anyway it was a great experience, I met a lot of interesting people, learn so many things (see the blog here).</p>

<h2 id="practicals-information">Practicals information</h2>

<p>The code is released under the <a href="https://www.gnu.org/licenses/gpl-3.0.en.html">GNU General Public License v3</a></p>

<p>The originals graphics and musics assets are released under the Creative Common Attribution-NonCommercial-NoDerivatives 4.0 International (<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/">CC BY-NC-ND 4.0</a>)</p>

<ul>
<li>Graphics assets are made by <a href="https://www.artstation.com/jbn0s0rus">Jean-Baptiste Dessaux</a></li>
<li>Audio assets are made by <a href="https://www.quentinmalapel.com">Quentin Malapel</a></li>
</ul>

<p>I can not understate what a great job they have done!</p>

<h2 id="assets-and-packages">Assets and packages</h2>

<p>The game use other assets and packages, please refer to each package to get the appropriate license.</p>

<p>Some may be commercial assets, they may be included in this repository only for the sake of simplicity. This does not grant you any right on those assets, if you need to use those please get your own license when relevant.</p>

<p>Great asset used in the project:</p>

<ul>
<li><a href="https://github.com/Cysharp/UniTask.git">Unitask</a></li>
<li><a href="https://github.com/febucci/unitypackage-custom-hierarchy.git">Custom Hierarchy</a></li>
<li><a href="https://github.com/jilleJr/Newtonsoft.Json-for-Unity">Newtonsoft json-for-unity</a></li>
<li><a href="https://assetstore.unity.com/packages/tools/physics/advanced-polygon-collider-52265">AdvancedPolygonCollider</a></li>
<li><a href="https://assetstore.unity.com/packages/vfx/shaders/all-in-1-sprite-shader-156513">AllIn1SpriteShader</a></li>
<li><a href="https://assetstore.unity.com/packages/tools/animation/dotween-hotween-v2-27676">DOTween</a></li>
<li><a href="https://assetstore.unity.com/packages/2d/gui/gui-pro-kit-fantasy-rpg-170168">GUI Pro Kit Fantasy RPG</a></li>
<li><a href="https://assetstore.unity.com/packages/vfx/particles/cartoon-fx-free-109565">JMO Assets Free</a></li>
<li><a href="https://assetstore.unity.com/packages/tools/ai/pathberserker2d-360-platformer-pathfinding-175968">PathBerserker2d</a></li>
<li>Anima2D (loved it, but it is now discontinued)</li>
</ul>

<h2 id="source-code">Source code</h2>

<p>If you have any question, please open an issue on the corresponding repository:</p>

<ul>
<li><a href="https://github.com/ArtilleryRoyale/game">github.com/ArtilleryRoyale/game</a></li>
<li><a href="https://github.com/ArtilleryRoyale/server">github.com/ArtilleryRoyale/server</a></li>
</ul>

<p>And as always, you can <a href="https://artilleryroyale.com/steam">get the game on Steam (it's free!)</a></p>
]]></content>
    </entry>
feed>