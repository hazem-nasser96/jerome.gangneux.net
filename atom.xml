<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Jérôme Gangneux]]></title>
    <link href="/atom.xml" rel="self"/>
    <link href="/"/>
    <updated>2022-07-17T17:35:17+00:00</updated>
    <id>/</id>
        <author>
        <name><![CDATA[jrmgx]]></name>            </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
        <entry>
        <title type="html"><![CDATA[Duolingo Flashcards]]></title>
        <link href="/2022/07/03/duolingo-to-flashcards"/>
        <updated>2022-07-03T00:00:00+00:00</updated>
        <id>/2022/07/03/duolingo-to-flashcards</id>
        <content type="html"><![CDATA[<h1 id="duolingo-flashcards">Duolingo Flashcards</h1>

<h2 id="long-intro">Long Intro</h2>

<p>You may — or may not — know me, but let me tell you one of my passion in life: connect everything together.</p>

<p>When I was young — let's say 15 — I tried to connect a landline phone to my computer sound card, learning a lesson here: landline in France carry a bit of electricity and my computer did not like it. I had to play without sound for a while.</p>

<p>I also have a project in the work about connecting plants to synthesizers, so we could hear them grow — but I have yet to find more time to work on it.</p>

<p>And of course, a part of my job is to connect programs (APIs) together to build products and services.</p>

<p>Anyway, today I'm going to talk about a more down to earth usage, hacky one, but a need I had.</p>

<p>I'm trying to learn a new language (Spanish) mostly for fun and brain practice. And for that, I'm using the app Duolingo. It's good (for now) but it does not have a feature I love: flashcards.</p>

<blockquote>
  <p>A flashcard is a card bearing information on both sides, which is intended to be used as an aid in memorization. Each flashcard bears a question on one side and an answer on the other. Flashcards are often used to memorize vocabulary, historical dates, formulas or any subject matter that can be learned via a question-and-answer format. Flashcards can be virtual (part of a flashcard software), or physical. <a href="https://en.wikipedia.org/wiki/Flashcard" title="❤️ wikipedia">Wikipedia</a></p>
</blockquote>

<p>On the other side, it exists free flashcard apps like: Ankiapp that allows user to make their own flashcard set, and even in that case, import CSV into it.</p>

<p>Say no more, let's connect those together.</p>

<h2 id="connect-everything">Connect Everything</h2>

<p>First, I need an API point on the Duolingo part, but unfortunately, it does not exist… The internet being a magic place full of ressources, I found someone working on an unofficial API. Thank you, <a href="#">@KartikTalwar</a>, for <a href="#">github.com/KartikTalwar/Duolingo</a>.</p>

<p>I took me sometime to explore the API (without doc) and found some endpoints that would do the job.</p>

<p>The next step is the easy one, take my favorite scripting language PHP and build a CSV file from this info. After a bit of test, it works as expected, I cleaned up the whole projet and decided to put it online, so you could use it too.</p>

<p>Find it here <a href="https://github.com/jrmgx/duo-vocabulary">github.com/jrmgx/duo-vocabulary</a> you have all the information to use it on the repository. It's easy with docker, you don't have to install anything <code>docker run jrmgx/duo-vocabulary [parameters] &gt; output.csv</code></p>

<h2 id="limitations">Limitations</h2>

<ul>
<li>It has some specific hardcoded rules to remove feminine and plural words, but those rules only work for Spanish (the language I'm learning right now).</li>
<li>Duolingo does not provide an official API, for that reason, it may stop working at anytime (without any way to fix it).</li>
<li>From what I understood, calls to <code>dictionary/hints</code> endpoint are limited in payload size, it may have to be split at some point, but for now, with my current usage it works like that.</li>
</ul>

<h2 id="update">Update</h2>

<p>I made a <a href="https://telegram.me/FlashCartesBot?start=perso">telegram bot</a> that can handle those CSV to be used as a flashcard bot</p>

<p>Enjoy!</p>
]]></content>
    </entry>
        <entry>
        <title type="html"><![CDATA[Performant tooling with Docker and macOS]]></title>
        <link href="/2022/05/03/performant-tooling-docker-macos"/>
        <updated>2022-05-03T00:00:00+00:00</updated>
        <id>/2022/05/03/performant-tooling-docker-macos</id>
        <content type="html"><![CDATA[<h1 id="performant-tooling-with-docker-and-macos">Performant tooling with Docker and macOS</h1>

<p>Developers love performant tools, I mean, developers NEED performant tools!</p>

<p>I'm not going to talk about whether you should use macOS to develop.<br />
Personally, I do, not gonna argument here.</p>

<p>Problem is, I use Docker, and it's sad that this sentence starts with "problem".<br />
Docker has helped the dev community and I like this tools, I mean, I like the idea and the possibilities it offers.</p>

<p><strong>But on macOS it's slow as hell.</strong></p>

<p>To be honest, it's not slow in every situation but only some, unfortunately the one that are mostly the main usage of Docker in a development environment.<br />
<a href="https://github.com/docker/for-mac/issues/77">This is not new as you can see on this issue reported in 2016</a>.</p>

<p>Issues are related to volume performance, specifically the way volumes are mounted on macOS.<br />
And for applications which perform many I/O disk operations, it can become almost not usable.</p>

<p>Unfortunately, I'm in that case, being a web/symfony developper I handle projects with many dependencies/cache and thus many I/O.</p>

<p>I heard that Docker decided to have a <a href="https://www.docker.com/blog/speed-boost-achievement-unlocked-on-docker-desktop-4-6-for-mac/">look at this issue</a>.<br />
It took them far too much time to do so, but that's another topic.<br />
Their effort seems to go somewhere for some people, not so much for me.</p>

<p>Of course, I tried every option before, and trust me on this one.<br />
Being <a href="http://docker-sync.io">docker-sync</a> (which was the best tradeoff), mutagen, VM with docker inside, and other fancy other attempts.</p>

<p>And today, I'm thrilled to tell you that I compiled the best of all those errands into a solution that's quite acceptable.<br />
It is the solution I use for all my projects, and so far, it has been a pleasure again to use Docker on macOS.</p>

<p>This solution is heavily inspired by docker-sync and I basically removed a layer, and thus it gives more control on the whole process.<br />
It can be resumed like this: don't use <code>-v</code> ever, instead make specific docker volumes and synchronize them with <code>unison</code> &lt;3</p>

<p>Let's dive in, code is coming.</p>

<h2 id="part-one%3A-building">Part one: building</h2>

<h3 id="installing-unison-local%2Fdocker">Installing unison local/docker</h3>

<p>We want to install unison on our local machine, it will then connect to our container that has the mounted volume.</p>

<p><code>$ brew install unison</code></p>

<p>Then get the version, as it is important to have the same version on both the client (your local machine) and the server (the docker container with the volume).</p>

<pre><code class="shell">$ unison -version
unison version 2.52.0 (ocaml 4.12.0)
</code></pre>

<p>Now we build a docker image with <code>unison</code> at the same version (both unison and ocaml version should match)</p>

<p><code class="filepath">Dockerfile</code></p>

<pre><code class="language-dockerfile">FROM ubuntu:20.04

ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update &amp;&amp; \
    apt-get install -y --no-install-recommends \
        curl wget build-essential coreutils openssh-server git bash \
        inotify-tools monit supervisor rsync ruby tzdata \
    &amp;&amp; rm -rf /var/lib/apt/lists/* /var/cache/apt/*

# Install OCAML: adapt version number from your own local setup
RUN wget http://caml.inria.fr/pub/distrib/ocaml-4.12/ocaml-4.12.0.tar.gz \
    &amp;&amp; tar xvf ocaml-4.12.0.tar.gz -C /tmp \
    &amp;&amp; cd /tmp/ocaml-4.12.0 \
    &amp;&amp; ./configure \
    &amp;&amp; make world \
    &amp;&amp; make opt \
    &amp;&amp; umask 022 \
    &amp;&amp; make install \
    &amp;&amp; make clean \
    &amp;&amp; rm -rf /tmp/ocaml-4.12.0 \
    &amp;&amp; rm /ocaml-4.12.0.tar.gz

# Install Unison: adapt version number from your own local setup
RUN curl -L https://github.com/bcpierce00/unison/archive/v2.52.0.tar.gz | tar zxv -C /tmp \
    &amp;&amp; cd /tmp/unison-2.52.0 \
    # needed for &lt; 2.51.4 with OCALM 4.12 - see https://github.com/bcpierce00/unison/pull/480
    # and https://github.com/Homebrew/homebrew-core/blob/HEAD/Formula/unison.rb#L13
    # &amp;&amp; curl https://github.com/bcpierce00/unison/commit/14b885316e0a4b41cb80fe3daef7950f88be5c8f.patch?full_index=1 -o patch.diff \
    # &amp;&amp; ([[ &quot;2.52.0&quot; == &quot;2.51.3&quot; ]] &amp;&amp; git apply patch.diff); \
    # rm patch.diff \
    &amp;&amp; sed -i -e &#039;s/GLIBC_SUPPORT_INOTIFY 0/GLIBC_SUPPORT_INOTIFY 1/&#039; src/fsmonitor/linux/inotify_stubs.c \
    &amp;&amp; make UISTYLE=text NATIVE=true STATIC=true \
    &amp;&amp; cp src/unison src/unison-fsmonitor /usr/local/bin \
    &amp;&amp; rm -rf /tmp/unison-2.52.0

# These can be overridden later
ENV TZ=&quot;Europe/Paris&quot; \
    LANG=&quot;C.UTF-8&quot; \
    UNISON_DIR=&quot;/data&quot; \
    HOME=&quot;/root&quot;

# Install SSH packages
RUN apt-get update &amp;&amp; \
    apt-get install openssh-server -y --no-install-recommends &amp;&amp; \
    rm -rf /var/lib/apt/lists/* /var/cache/apt/*

RUN mkdir -p /run/sshd
RUN mkdir -p /root/.ssh

# You should insert your public key in this file
COPY authorized_keys /root/.ssh/authorized_keys

# Editing the SSHD config file
RUN echo &#039;PermitRootLogin yes&#039; &gt;&gt; /etc/ssh/sshd_config

# Make port 22 available to the world outside this container
EXPOSE 22

# Run SSHD when the container starts
CMD [&quot;/usr/sbin/sshd&quot;, &quot;-D&quot;]
</code></pre>

<p>You may need to adapt a bit, see comments</p>

<h3 id="create-the-docker-volume-and-container">Create the Docker volume and container</h3>

<p><code>docker volume create --name your-project-name-volume</code></p>

<p><code>docker create -h your-project-name --name your-project-name-sync -it -p PORT:22 -v your-project-name-volume:/data your/image /bin/bash</code>
Replace <code>PORT</code> with some available port on your machine.</p>

<h2 id="part-two%3A-usage">Part two: usage</h2>

<h3 id="configuration-in-your-docker-compose">Configuration in your docker-compose</h3>

<p>Now, everywhere you need those project files, instead of linking the local filesystem with <code>-v</code> or <code>volumes</code> you reference <code>your-project-name-volume</code> instead!</p>

<p><code class="filepath">docker-compose.yml</code></p>

<pre><code class="language-yaml">version: &quot;3.3&quot;
services:

    apache:
        build: docker/apache
        volumes:
            - &quot;your-project-name-volume:/var/www&quot;
# Instead of
#        volumes:
#            - &quot;./:/var/www&quot;

volumes:
    your-project-name-volume:
        external: true
</code></pre>

<h3 id="start-the-container-and-sync">Start the container and sync</h3>

<p><code>docker start your-project-name-sync</code></p>

<p><code>cd PROJECT</code>
<code>unison . ssh://root@127.0.0.1:PORT//data -repeat=watch -auto -batch -ignore 'Path .git' -ignore 'Path var'</code>
Replace <code>PORT</code> with some available port on your machine.</p>

<p>Of course, you can put that into a bash script:</p>

<pre><code class="bash">#!/bin/bash

docker start your-project-name-sync &amp;&amp; \
unison ./ ssh://root@127.0.0.1:PORT//data -repeat=watch -auto -batch -ignore 'Path .git' -ignore 'Path var'
</code></pre>

<h2 id="tradeoffs">Tradeoffs</h2>

<p>This solution comes with some tradeoffs, 
mainly the fact that your code base is duplicated on a Docker volume, thus duplicating the disk space required.
The first start will take some time too as it needs to synchronize the whole projet.</p>

<p>I reckon, it's a bit of configuration to do, but to me that works so well that I consider those a detail.</p>
]]></content>
    </entry>
        <entry>
        <title type="html"><![CDATA[The myth of overnight success]]></title>
        <link href="/2022/03/23/the-myth-of-overnight-success"/>
        <updated>2022-03-23T00:00:00+00:00</updated>
        <id>/2022/03/23/the-myth-of-overnight-success</id>
        <content type="html"><![CDATA[<p>This is my personal testimony against overnight success and all those marketing stories that people try to sell — most of the time literally with ebooks or other products —.</p>

<p>In 2019, I sold Thread Reader App, and that is some success in my point of view.</p>

<p>I started to develop the projet as a side project, or to be more correct as a support for my videos tutorials, which was the side project. Then it went viral, and I had the chance to make it work.</p>

<p>For some, it looks like an overnight success, but it was not.
Before having that lucky shoot, I made, or participated in, plenty of projects.</p>

<h3 id="most-of-it-failed.">Most of it failed.</h3>

<p>This list is here to show you that it needed <strong>numerous</strong> tries.<br />
Then you can understand that, before getting somewhere, you may have to try very hard.</p>

<p>This list only contain projects that I wanted to make money with.<br />
Note, when I say "made 0€" it really means, cost me a bunch of money + my own time.</p>

<style>.ar { display: inline-block; margin: 0 0.5rem 0 1rem; }</style>

<ul>
<li>Randomkiss (2007): Facebook app to meet random new people, made 0€</li>
<li>Shypic (2008): Event-based picture sharing website, did not make it to product</li>
<li>Allobars (2010): <a href="/2010/02/01/allobars">see dedicated page</a>, made 0€</li>
<li>Notes.git (2011): Note-taking app, made 0€</li>
<li>Citroon (2011): <a href="/2011/09/01/citroon">see dedicated page</a>, made 0€</li>
<li>Coffret cadeau addict (2011): Gift box comparator, made 0€</li>
<li>Cosmoz (2012): <a href="/2012/04/01/cosmoz">see dedicated page</a>, made 0€</li>
<li>Drink different (2012): Get good wine monthly subscription, did not make it to product</li>
<li>Ping url (2012): Check if a given URL is live, did not make it to product</li>
<li>Dailymood (2013): Every day, enter your mood and get yearly statistics, did not make it to product</li>
<li>What to buy with bitcoins (2013): Blog about bitcoin, made 0€</li>
<li>Newsbid (2013): Crowdfunding for journalists, did not make it to product</li>
<li>Creamly (2013): Snapchat clone, made 0€</li>
<li>My laboratory (2013): <a href="/2012/06/01/mylaboratory">see dedicated page</a><br />
<span class="ar">→</span> 300k downloads, made some bucks, not much.</li>
<li>Chkthatprice (2014): Price change alert for any web shop, made 0€</li>
<li>Coloriage (2014): App to allow kids to coloriage, did not make it to product</li>
<li>Patience (2014): Casual spelling game, did not make it to product</li>
<li>A bunch of casual games (2014): made with the collective <a href="/2012/03/01/weheartprojects">weheartprojects</a><br />
<span class="ar">→</span> made few bucks in ads.</li>
<li>Budeal (2014): <a href="/2014/10/01/budeal">see dedicated page</a><br />
<span class="ar">→</span> Spent almost a year full-time, got some traction, made a few euros but costed twice more.</li>
<li>ilovepromo (2014): <a href="/2014/12/01/ilovepromo">see dedicated page</a>.<br />
<span class="ar">→</span> Made some bucks, not much.</li>
<li>Bonne Nouvelle (2015): Connected photo frame, did not make it to product</li>
<li>Coach Sportif Video (2015): Create a video montage for your own sport coaching, did not make it to product</li>
<li>Newswipe (2015): Newsreader with swiping like tinder, made 0€</li>
<li>Mr. Smartphone (2015): <a href="/2015/07/01/mrsmartphone">see dedicated page</a><br />
<span class="ar">→</span> Good call but a bit late, I was burning out.</li>
<li>RSS Offline (2015): RSS reader with offline capability, made 0€</li>
<li>Filter for Slack (2017): <a href="/2017/01/01/filter-for-slack">see dedicated page</a>, made 0€</li>
<li>Android VR Webview (2017): <a href="/2017/02/01/android-vr-webview">see dedicated page</a>.<br />
<span class="ar">→</span> Made some euros, not worth the trouble</li>
<li>Thread Reader App (2017): <strong><a href="/posts/category/threadreader/">At least something happened!</a></strong></li>
</ul>

<p>And then after I started a bunch of new <strike>failures</strike> projects, namely: snooze.me, Glitch App, toFeed, Artillery Royale (the later cost me 10k€ and I got nothing from it).</p>

<p>Ten years, about 33 projects, only one lucky shoot…</p>

<p>There is no overnight success.</p>
]]></content>
    </entry>
        <entry>
        <title type="html"><![CDATA[(Re)discover XPath selectors]]></title>
        <link href="/2022/02/01/re-discover-xpath-selectors"/>
        <updated>2022-02-01T00:00:00+00:00</updated>
        <id>/2022/02/01/re-discover-xpath-selectors</id>
        <content type="html"><![CDATA[<p>See more at (jolicode.com/blog/re-discover-xpath-selectors)[https://jolicode.com/blog/re-discover-xpath-selectors]</p>
]]></content>
    </entry>
        <entry>
        <title type="html"><![CDATA[PHP Clone All The Things]]></title>
        <link href="/2022/01/05/php-clone-all-the-things"/>
        <updated>2022-01-05T00:00:00+00:00</updated>
        <id>/2022/01/05/php-clone-all-the-things</id>
        <content type="html"><![CDATA[<p>See more at (jolicode.com/blog/php-clone-all-the-things)[https://jolicode.com/blog/php-clone-all-the-things]</p>
]]></content>
    </entry>
        <entry>
        <title type="html"><![CDATA[Artillery Royale going free and open source!]]></title>
        <link href="/2021/11/01/artillery-royale-going-free-and-open-source"/>
        <updated>2021-11-01T00:00:00+00:00</updated>
        <id>/2021/11/01/artillery-royale-going-free-and-open-source</id>
        <content type="html"><![CDATA[<p>Hello, dear friends of Artillery Royale.</p>

<p>As you may have already understood, I decided to pause on the development of the game.</p>

<p><strong>About me:</strong> I'm quite sad about it but also very proud of the work done.
I did not find the resources to make it work, both in terms of motivation and finances. 
Because this is not my first project, I now know when it is time to stop and prevent myself to burn.</p>

<p>So it was a difficult decision but I have no regrets.</p>

<p><strong>Figures:</strong> I have spent about 12 months on that project and more than 10,000 euro of my own money (not even counting the time I spent). The game made US$ 80 of revenues (quite far from any benefits).</p>

<p>Now I have found a classic job to consolidate my finances (to be honest, that's not the only reason, but the rest is personal).</p>

<p><strong>Next:</strong> About Artillery Royale, it is now free on steam!
And I am releasing the source code as open source.</p>

<p>Why so? First, I think that code can help some people to learn a bit in game development.<br />
Also, if someone has a good feeling about the game, they may continue to work on it.</p>

<p>Anyway it was a great experience, I met a lot of interesting people, learn so many things (see the blog here).</p>

<h2 id="practicals-information">Practicals information</h2>

<p>The code is released under the <a href="https://www.gnu.org/licenses/gpl-3.0.en.html">GNU General Public License v3</a></p>

<p>The originals graphics and musics assets are released under the Creative Common Attribution-NonCommercial-NoDerivatives 4.0 International (<a href="https://creativecommons.org/licenses/by-nc-nd/4.0/">CC BY-NC-ND 4.0</a>)</p>

<ul>
<li>Graphics assets are made by <a href="https://www.artstation.com/jbn0s0rus">Jean-Baptiste Dessaux</a></li>
<li>Audio assets are made by <a href="https://www.quentinmalapel.com">Quentin Malapel</a></li>
</ul>

<p>I can not understate what a great job they have done!</p>

<h2 id="assets-and-packages">Assets and packages</h2>

<p>The game use other assets and packages, please refer to each package to get the appropriate license.</p>

<p>Some may be commercial assets, they may be included in this repository only for the sake of simplicity. This does not grant you any right on those assets, if you need to use those please get your own license when relevant.</p>

<p>Great asset used in the project:</p>

<ul>
<li><a href="https://github.com/Cysharp/UniTask.git">Unitask</a></li>
<li><a href="https://github.com/febucci/unitypackage-custom-hierarchy.git">Custom Hierarchy</a></li>
<li><a href="https://github.com/jilleJr/Newtonsoft.Json-for-Unity">Newtonsoft json-for-unity</a></li>
<li><a href="https://assetstore.unity.com/packages/tools/physics/advanced-polygon-collider-52265">AdvancedPolygonCollider</a></li>
<li><a href="https://assetstore.unity.com/packages/vfx/shaders/all-in-1-sprite-shader-156513">AllIn1SpriteShader</a></li>
<li><a href="https://assetstore.unity.com/packages/tools/animation/dotween-hotween-v2-27676">DOTween</a></li>
<li><a href="https://assetstore.unity.com/packages/2d/gui/gui-pro-kit-fantasy-rpg-170168">GUI Pro Kit Fantasy RPG</a></li>
<li><a href="https://assetstore.unity.com/packages/vfx/particles/cartoon-fx-free-109565">JMO Assets Free</a></li>
<li><a href="https://assetstore.unity.com/packages/tools/ai/pathberserker2d-360-platformer-pathfinding-175968">PathBerserker2d</a></li>
<li>Anima2D (loved it, but it is now discontinued)</li>
</ul>

<h2 id="source-code">Source code</h2>

<p>If you have any question, please open an issue on the corresponding repository:</p>

<ul>
<li><a href="https://github.com/ArtilleryRoyale/game">github.com/ArtilleryRoyale/game</a></li>
<li><a href="https://github.com/ArtilleryRoyale/server">github.com/ArtilleryRoyale/server</a></li>
</ul>

<p>And as always, you can <a href="https://artilleryroyale.com/steam">get the game on Steam (it's free!)</a></p>
]]></content>
    </entry>
        <entry>
        <title type="html"><![CDATA[Command line tools]]></title>
        <link href="/2021/08/10/command-line-tools"/>
        <updated>2021-08-10T00:00:00+00:00</updated>
        <id>/2021/08/10/command-line-tools</id>
        <content type="html"><![CDATA[<h1 id="introduction">Introduction</h1>

<p>I am a big fan of command line utilities and scripts, so I wanted to share with you some tricks I learned and scripts I use.
Some are only a command with notable options, more like a memo of how to use them, other are homemade scripts.</p>

<h1 id="basics">Basics</h1>

<h2 id="find-and-related">Find and related</h2>

<p>Find allows you to apply some quite powerful command to your files, you can query it so it gets only specifics files and then pipe them to some command.</p>

<pre><code class="bash">find . -type f \ # Find all file (only of type: file, not directories)
    ! -mtime 60 \ # Where modification time is greater (!) than 60 days
    --exec rm "{}" -f \; # Exec that command (rm -f here)
# Note: using xargs is faster, so we can do something similar:
find . -name .svn \ # Find all file with name '.svn'
    -print0 \ # Send the list to (null padded)
    | xargs -0 \ # Get the list from (null padded)
    rm -rf # Current command (rm -f here)
# Find file by extended regex
find -E . -regex ".*\.(php|sh)"
</code></pre>

<p><br>
<code>xargs</code> allows you to build/execute a command from an input that you get on the pipe.</p>

<pre><code class="bash"># -I % defines "%" as the placeholder
cat foo.txt | xargs -I % sh -c "echo %; mkdir %;"
</code></pre>

<p><br></p>

<h3 id="find-in-combination-with-other-utilities">Find in combination with other utilities</h3>

<pre><code class="bash"># Copy all mp4 file to /tmp
find . -type f -iname "*.mp4" -exec cp "{}" /tmp \;
# Update all C# file "end of line" from windows to unix (dos2unix)
find . -type f -iname "*.cs" -exec dos2unix "{}" \;
# Rename all file, replacing 'Screenshot-' by 'Screen_'
find . -exec rename -s "Screenshot-" "Screen_" "{}" \;
# For each jpg, get the exif meta or add a macos tag if not found (-I % defines the placeholder)
find . -iname "*.jpg" -print0 | xargs -I % -0 bash -c 'exiftool "%" | grep -i "create date" || tag -a missingExif "%"'
# You can have complex queries for find with \( \) and -o
find . \( -iname "*.html" -o -iname "*.php" \) -print0 | xargs -I % -0 bash -c 'echo "%";'
</code></pre>

<h2 id="curl">CURL</h2>

<p>Curl makes web requests, it's very powerful for basic and not-so basic requests, allowing you to download files, forge request and even interact with API.</p>

<pre><code class="bash">curl \
    -d "param1=value1&amp;param2=value2" \ # Post data
    -H "Content-Type: application/x-www-form-urlencoded" \ # This is the default with POST
    -X POST \ # Method
    URL
curl \
    -d "@data.txt" \ # Send this file "data.txt"
    -X POST \
    URL
curl \
    -d '{"key1":"value1", "key2":"value2"}' \ # Post data, here JSON
    -H "Content-Type: application/json" \ # Specific JSON header
    -X POST URL
</code></pre>

<h2 id="ffmpeg">FFMPEG</h2>

<p>ffmpeg is one of my favorite command line tool, I'm always amazed by what it's possible to do with it!<br />
I use it extensibly for some <a href="/2021/02/17/generative-movies">generative art pieces</a>.</p>

<pre><code class="bash"># Scaling
ffmpeg -i input.mp4 -vf scale=1024:768 output.mp4 
# Scaling and keep aspect ratio
ffmpeg -i input.mp4 -vf scale=320:-1 output.mp4 
# Cropping: "crop=out_width:out_height:x:y"
ffmpeg -i input.mp4 -filter:v "crop=480:360:0:60" output.mp4 
# Change speed: in this example accelerate by a factor ten (0.1*)
ffmpeg -i input.mp4 -filter:v "setpts=0.1*PTS" -an output.mp4 
# Convert GIF in video
ffmpeg -f gif -i image.gif -vcodec mpeg4 -y output.mp4 
# Get video duration
ffprobe -i input.mp4 -show_entries format=duration -v quiet -of csv="p=0"
</code></pre>

<p><br></p>

<h3 id="encode-from-image-list">Encode from image list</h3>

<pre><code class="bash">ffmpeg \
    -framerate 50 \ # Input framerate
    -i video_%06d.png \ # Image names (sprint pattern)
    -r 50 \ # Output framerate
    -pix_fmt yuv420p output.mp4
</code></pre>

<h2 id="rsync">Rsync</h2>

<p>Rsync is powerful and versatile, I'm using it for backups and remote server sync, but it can do way more!</p>

<pre><code class="bash"># Here I use it for basic one-way no-history archiving
rsync \
    --archive \ # implies: recursive ; preserve time, owner, group, perms ; copy symlinks as it
    --human-readable --progress \
    --delete \ # Delete the file on destination if not present on the source any more
    --exclude='node_modules' \ # Node ;-)
    /Users/jerome/projects /Volumes/Backup-disk # Source / Destination
# Synchronize the local directory with the distant one
sync --archive --verbose --delete \
    -e "ssh -p 22" \ # Remote shell to use (here ssh with option -P 22)
    static/ root@example.com:/var/www/
</code></pre>

<h1 id="macos-specific">MacOs specific</h1>

<p>I'm a macOS user, and I like this operating system because it is based on UNIX and thus has great command line support.</p>

<pre><code class="bash"># Will make your mac speak
say "a sentence" 
# Copy/past from the term
echo "copy that" | pbcopy 
pbpaste
# Similar to unix locate, find a file on your machine
mdfind 
# Mount a disk image
hdiutil attach diskimage.dmg 
# Change the time between two time machine saves
sudo defaults write /System/Library/LaunchDaemons/com.apple.backupd-auto StartInterval -int 1800 # seconds
</code></pre>

<h1 id="general-shell">General shell</h1>

<pre><code class="bash"># Redirect the error output to the standard output (stderr to stdout)
echo 'test' 2&gt;&amp;1
# Mount a distant directory to the local filesystem
sshfs username@example.com:/directory directory
# Delete the line LINE_NUMBER in the file
sed 'LINE_NUMBERd' file
# Stop/continue a process by pid
kill -s STOP/CONT PID
# Create an archive for this directory
tar -cvzf archive.tar.gz directory
# Extract the given tarball
tar -xvf archive.tar.gz
# Generate a new key pair
ssh-keygen -t dsa
# Change extended permissions on a file
setfacl -Rm u:username:rw directory
# Convert windows line ending file to unix
dos2unix 
# Add user (username) to group
usermod -a -G group username 
</code></pre>

<h1 id="specific-tools">Specific tools</h1>

<h2 id="firewall">Firewall</h2>

<p>On my Linux server I use ufw (Uncomplicated Firewall), and it holds its promise!
See it in action below:</p>

<pre><code class="bash">ufw allow 22 # ssh
ufw allow 443 # https
ufw allow 80 # http
ufw enable
</code></pre>

<h2 id="mosh">Mosh</h2>

<p>I use <a href="https://mosh.org">Mosh</a></p>

<blockquote>
  <p>Mosh (mobile shell)</p>
  
  <p>It's a remote terminal application that allows roaming, supports intermittent connectivity, and provides intelligent local echo and line editing of user keystrokes.</p>
  
  <p>Mosh is a replacement for interactive SSH terminals. It's more robust and responsive, especially over Wi-Fi, cellular, and long-distance links.</p>
  
  <p>Mosh is free software, available for GNU/Linux, BSD, macOS, Solaris, Android, Chrome, and iOS.</p>
</blockquote>

<h2 id="ngrok">ngrok</h2>

<p>I use <a href="https://ngrok.com">ngrok</a></p>

<p>This is a proprietary tool, but still, it has a free tier that is enough for me.<br />
It may exist some similar tools, do not hesitate to contact me!</p>

<blockquote>
  <p>Ngrok exposes local servers behind NATs and firewalls to the public internet over secure tunnels.</p>
</blockquote>

<h1 id="my-own-scripts">My Own scripts</h1>

<h2 id="filename-%2F-extname">filename / extname</h2>

<p>Similar to <code>basename</code>, I've often needed to get the filename (without extension) or the extension of a given file in my scripts.<br />
I added them in my path, so they are accessible when needed.</p>

<p><code class="filepath">filename</code></p>

<pre><code class="language-bash">#!/bin/bash

if [[ $# -ne 1 ]]
then
    echo &quot;usage: $0 \&quot;filename.ext\&quot;&quot;
    echo &quot;Returns filename without extension&quot;
    echo &quot;Note: it applies basename before&quot;
    exit 2
fi

BASENAME=&quot;$(basename &quot;$1&quot;)&quot;
EXTENSION=&quot;${BASENAME##*.}&quot;
FILENAME=&quot;${BASENAME%.*}&quot;

echo &quot;${FILENAME}&quot;
exit 0</code></pre>

<p><br>
<code class="filepath">extname</code></p>

<pre><code class="language-bash">#!/bin/bash

if [[ $# -ne 1 ]]
then
    echo &quot;usage: $0 \&quot;filename.ext\&quot;&quot;
    echo &quot;Returns filename&#039;s extension&quot;
    echo &quot;Note: it applies basename before&quot;
    exit 2
fi

BASENAME=&quot;$(basename &quot;$1&quot;)&quot;
EXTENSION=&quot;${BASENAME##*.}&quot;
FILENAME=&quot;${BASENAME%.*}&quot;

echo &quot;${EXTENSION}&quot;
exit 0</code></pre>

<h2 id="retime">Retime</h2>

<p>This script is more specific to my needs, but still I think it can be useful to someone.<br />
It will try to rename a media file with the date/time of creation.<br />
Note: it uses PHP and exiftool to work.</p>

<p><code class="filepath">retime</code></p>

<pre><code class="language-php">#!/usr/bin/env php
&lt;?php

function stdout($message)
{
    echo $message.&quot;\n&quot;;
}

if (2 != count($argv)) {
    stdout(&#039;Rename media files to their original creation time (if possible)&#039;);
    stdout(&quot;Usage {$argv[0]} source_media&quot;);

    exit(1);
}

function exiftool(string $file): array
{
    $output = shell_exec(&#039;exiftool &#039;.escapeshellarg($file));
    $data = [];
    foreach (explode(&quot;\n&quot;, $output) as $line) {
        $l = explode(&#039;:&#039;, $line, 2);
        $data[trim($l[0])] = trim($l[1]);
    }

    return $data;
}

$file = $argv[1];
$directory = dirname($file);
$extension = pathinfo($file, PATHINFO_EXTENSION);
$data = exiftool($file);

if (isset($data[&#039;Creation Date&#039;])) {
    $exifDate = $data[&#039;Creation Date&#039;];
} elseif (isset($data[&#039;Date Time Original&#039;])) {
    $exifDate = $data[&#039;Date Time Original&#039;];
} else {
    stdout(&quot;Can not find relevant exif information for {$file}&quot;);

    exit(1);
}

$date = date_create($exifDate);
if (!$date) {
    stdout(&quot;Can not parse date for {$file}&quot;);

    exit(2);
}

$name = $date-&gt;format(&#039;Y-m-d H-i-s&#039;).&#039;.&#039;.$extension;
$destination = $directory.DIRECTORY_SEPARATOR.$name;

if (file_exists($destination)) {
    stdout(&quot;A file with that name already exist {$name} for file {$file}&quot;);

    exit(3);
}

rename($file, $destination);
$touchDate = $date-&gt;format(&#039;YmdHi.s&#039;);
shell_exec(&#039;touch -t &#039;.$touchDate.&#039; &#039;.escapeshellarg($destination));
stdout(&quot;Success: {$file} renamed in {$destination}&quot;);

exit(0);
</code></pre>

<h2 id="doubloons">Doubloons</h2>

<p>This script looks for file doubloons in the current and sub-directories.<br />
Note: it's a PHP script that use a SQLite database.</p>

<p><code class="filepath">doubloons</code></p>

<pre><code class="language-php">#!/usr/bin/env php
&lt;?php

const DB_FILE_NAME = &#039;./doubloon.sqlite&#039;;
$shortOptions = [];
// Index options
$shortOptions[&#039;e:&#039;] = &#039;File extension to check ; coma separated ; case insensitive ; default: &quot;jpg,jpeg,gif,png&quot;&#039;;
$shortOptions[&#039;s:&#039;] = &#039;Hash algorithm used ; available: md5, sha1 ; default &quot;md5&quot;&#039;;
$shortOptions[&#039;r&#039;] = &#039;Reset/rebuild index&#039;;
// Program options
$shortOptions[&#039;f&#039;] = &#039;For a given doubloon ; keep the first and delete the others ; default: interactive mode: ask&#039;;
$shortOptions[&#039;h&#039;] = &#039;This help&#039;;

$options = array_merge([
    &#039;e&#039; =&gt; &#039;jpg,jpeg,gif,png&#039;,
    &#039;s&#039; =&gt; &#039;md5&#039;,
], getopt(implode(array_keys($shortOptions)), []));

function stdout($message)
{
    echo $message.&quot;\n&quot;;
}

function sqlite(bool $create)
{
    $sql = new SQLite3(DB_FILE_NAME);
    if ($create) {
        $sql-&gt;exec(&#039;CREATE TABLE &quot;file&quot; (&quot;path&quot; text NOT NULL, &quot;hash&quot; varchar NOT NULL, PRIMARY KEY (path));&#039;);
    }

    return $sql;
}

function findDoubloons()
{
    $hashes = [];
    $db = sqlite(false);
    $result = $db-&gt;query(&#039;SELECT * FROM `file` WHERE `hash` IN (
        SELECT `hash` FROM `file` GROUP BY `hash` HAVING COUNT(*) &gt;= 2
    )&#039;);
    while (($row = $result-&gt;fetchArray(SQLITE3_ASSOC))) {
        $hashes[$row[&#039;hash&#039;]][] = $row[&#039;path&#039;];
    }

    return $hashes;
}

function index(string $directory, string $extensions, string $hashAlgo)
{
    stdout(&#039;Building index...&#039;);
    $extensionsRegex = &#039;`\.(&#039;.str_replace(&#039;,&#039;, &#039;|&#039;, preg_quote($extensions)).&#039;)$`i&#039;;
    $find = shell_exec(&#039;find -L &quot;&#039;.$directory.&#039;&quot;&#039;); // -L to follow symlinks
    $data = explode(&quot;\n&quot;, $find);
    $db = sqlite(true);
    foreach ($data as $line) {
        $line = trim($line);
        if (!preg_match($extensionsRegex, $line)) {
            continue;
        }
        if (&#039;sha1&#039; === $hashAlgo) {
            $hash = sha1_file($line);
        } else {
            $hash = md5_file($line);
        }
        $statement = $db-&gt;prepare(&#039;INSERT OR IGNORE INTO `file` VALUES (:path, :hash);&#039;);
        $statement-&gt;bindParam(&#039;:path&#039;, $line, SQLITE3_TEXT);
        $statement-&gt;bindParam(&#039;:hash&#039;, $hash, SQLITE3_TEXT);
        $statement-&gt;execute();

        stdout($line.&#039;: &#039;.$hash);
    }

    stdout(&#039;done.&#039;);

    exit(0);
}

function remove($interactive)
{
    $hashes = findDoubloons();
    $delete = [];
    $progress = 0;
    $total = count($hashes);
    stdout(&#039;Started, type 99 to finish...&#039;);
    foreach ($hashes as $hash =&gt; $paths) {
        ++$progress;
        stdout(&quot;Found doubloons ({$progress}/{$total}):&quot;);
        stdout(&#039;    0. No action&#039;);
        $candidates = [];
        $c = 0;
        foreach ($paths as $path) {
            ++$c;
            $candidates[$c] = $path;
            stdout(&quot;    {$c}. {$path}&quot;);
        }
        if (!$interactive) {
            $action = 1;
        } else {
            $action = (int) trim(readline(&quot;&gt; keep [0-{$c}]: &quot;));
        }
        if (0 == $action) {
            continue;
        }
        if (99 == $action) {
            break;
        }
        unset($candidates[$action]);
        $delete = array_merge($delete, array_values($candidates));
    }
    stdout(&quot;Double check everything and execute:\n&quot;);
    foreach ($delete as $d) {
        stdout(&#039;rm &quot;&#039;.$d.&#039;&quot;&#039;);
    }
    stdout(&#039;rm &#039;.DB_FILE_NAME);

    return $delete;
}

if (array_key_exists(&#039;h&#039;, $options)) {
    stdout(&quot;Usage: {$argv[0]} [options]&quot;);
    foreach ($shortOptions as $name =&gt; $message) {
        $name = trim($name, &#039;:&#039;);
        stdout(&quot;    -{$name}    {$message}&quot;);
    }

    exit(0);
}

if (array_key_exists(&#039;r&#039;, $options)) {
    @unlink(DB_FILE_NAME);
}

if (!file_exists(DB_FILE_NAME)) {
    // No index exist in this directory, build one
    index(&#039;.&#039;, $options[&#039;e&#039;], $options[&#039;s&#039;]);
} else {
    // the index already exist, start the program
    remove(!array_key_exists(&#039;f&#039;, $options));
}
</code></pre>

<h2 id="other-custom-made-scripts">Other custom made scripts</h2>

<p>I made other scripts that are probably to specific and too messy to be published here,
one I like an used a lot was a PHP script (+ command line tools) that split a mbox file and extract message/attachment to a database. 
Worked well to save my emails when I left gmail. Let me know if you are interested :)</p>

<p><link rel="stylesheet" href="/assets/css/monokai.min.css">
<script type="text/javascript" src="/assets/js/highlight.min.js"></script>
<script>hljs.highlightAll();</script></p>
]]></content>
    </entry>
        <entry>
        <title type="html"><![CDATA[Apache + PHP FPM + Mysql with docker]]></title>
        <link href="/2021/06/24/apache-php-fpm-mysql-docker"/>
        <updated>2021-06-24T00:00:00+00:00</updated>
        <id>/2021/06/24/apache-php-fpm-mysql-docker</id>
        <content type="html"><![CDATA[<h1 id="introduction">Introduction</h1>

<p>It was about time, I decided to update my stack and use docker on my servers.</p>

<p>For the ones that follows me I usually prefer to set up a bare metal server with Debian Apache PHP and MySQL installed on it.<br />
My excuses — if I even need some — were a mix between performances and simplicity.</p>

<p>But today I'm experimenting with multiple small projects, and they all are on the same server.
It's still a bare metal server, and I'm not — yet — changing this for a cloud provider, we can talk about this in another blog post.</p>

<p>Multiple projects with a single server can lead to some incompatible dependencies,
in my specific scenario I need some PHP extension that is obsolete and works only with older PHP version, but I don't want to carry this limitation to all my projects.</p>

<p>Why Apache and not Nginx? <a href="https://youtu.be/-rmf5EqJVDw?t=16">No reason &copy;</a>.</p>

<p>Let's see how I built my LAMP stack with Docker (should we say DAMP?)</p>

<h1 id="php">PHP</h1>

<p>I used the <code>php:7.4-fpm</code> base image and added some extensions, those vary depending on the current project.</p>

<p>I added composer because it's always handy to have it there, plus, and this may be up for discussion, I added NodeJS + PM2 in this image too.</p>

<p>Node is often needed for the front end (compiling asset and such) and I did not want the complexity of another image (but I'm open for comment/PR on this one)
as well as <a href="pm2.keymetrics.io/">PM2</a> that I use for my background scripts. 
For example like this: <code>pm2 start --name php_messenger_consume php -- bin/console -n messenger:consume async --limit=10 --memory-limit=128M --time-limit=3600</code></p>

<p>It's very handy to have it on the same image as PHP, and does not look even possible otherwise (let me know in the comments).</p>

<p><code class="filepath">file:///docker/php/Dockerfile</code></p>

<pre><code class="language-dockerfile">
FROM php:7.4-fpm

# PHP and related
RUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \
        locales \
        apt-utils \
        git \
        g++ \
        libicu-dev \
        libpng-dev \
        libxml2-dev \
        libzip-dev \
        libonig-dev \
        libxslt-dev \
        unzip \
        libfreetype6-dev \
        libjpeg62-turbo-dev \
    &amp;&amp; docker-php-ext-configure gd --with-freetype --with-jpeg \
    &amp;&amp; docker-php-ext-configure intl \
    &amp;&amp; docker-php-ext-install \
        pdo \
        pdo_mysql \
        opcache \
        intl \
        zip \
        calendar \
        dom \
        mbstring \
        gd \
        xsl \
    &amp;&amp; pecl install apcu \
    &amp;&amp; docker-php-ext-enable apcu \
\
    &amp;&amp;  curl -sS https://getcomposer.org/installer | php -- \
    &amp;&amp;  mv composer.phar /usr/local/bin/composer

RUN mv &quot;$PHP_INI_DIR/php.ini-production&quot; &quot;$PHP_INI_DIR/php.ini&quot;

# Node 14 and related
RUN curl -fsSL https://deb.nodesource.com/setup_14.x | bash - \
    &amp;&amp; apt-get install -y --no-install-recommends nodejs \
    &amp;&amp; npm install pm2@5.0 -g \
    &amp;&amp; pm2 install pm2-logrotate \
    &amp;&amp; pm2 set pm2-logrotate:compress true

</code></pre>

<h1 id="apache">Apache</h1>

<p>This on is a bit more tricky.</p>

<p>First on my production server I won't use it, the server will have a real Apache with vhosts configured properly forwarding to each different projects.
Those final vhosts will look similar to the one below that I use in the development image.</p>

<p>So for the dev env (hence the <code>docker-compose-dev.yml</code> coming up below) it will have Apache.</p>

<p>The goal is to redirect the query that hit the server to PHP FPM.</p>

<p>For this, I first tried to use the base image <code>httpd:2.4</code> it seemed logic to me but for some reason I never succeeded to make it work, (have you? PR welcome).
I ended up using a debian base <code>debian:buster-slim</code> and installed Apache on my own (probably not optimal, but we are on a dev environment).</p>

<p>It has <em>mod proxy fast CGI</em> and <em>mod rewrite</em> activated as we will use it in our config.</p>

<p><code class="filepath">file:///docker/apache/Dockerfile</code></p>

<pre><code class="language-dockerfile">
FROM debian:buster-slim

RUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \
    apache2 \
    &amp;&amp; a2enmod proxy_fcgi \
    &amp;&amp; a2enmod rewrite

CMD /usr/sbin/apache2ctl -D FOREGROUND

</code></pre>

<h1 id="mysql">MySQL</h1>

<p>I'm using the base image <code>mysql</code> with some options like <code>MYSQL_ALLOW_EMPTY_PASSWORD</code> and <code>cap_add: SYS_NICE</code>. 
The later prevent the error message "mbind: Operation not permitted" as seen on <a href="https://stackoverflow.com/a/55706057/696517">stackoverflow.com</a></p>

<h1 id="connecting-everything-together">Connecting everything together</h1>

<p>The idea now it to put everything together:</p>

<ul>
<li>Apache will be exposed to some port and redirect requests to PHP-FPM.</li>
<li>PHP will be able to connect to the database.</li>
<li>And also we can use PHP as a command line on our server to execute PHP commands.</li>
</ul>

<p>I added comments on the file directly, so you have the context.</p>

<p><small>Note: the name of the project is "bookmark" in this example</small></p>

<h2 id="production">Production</h2>

<p><code class="filepath">file:///docker-compose.yml</code></p>

<pre><code class="language-yaml">
version: &quot;3.3&quot;
services:

    database:
        image: mysql
        container_name: bookmark_mysql
        restart: always
        # We set up a docker volume to store our database data
        volumes:
            - bookmark-mysql-data:/var/lib/mysql
        environment:
            MYSQL_ALLOW_EMPTY_PASSWORD: &quot;yes&quot;
        networks:
            - bookmark-network
        # This option fix the &quot;mbind: Operation not permitted&quot; error that pops in the logs
        # https://stackoverflow.com/a/55706057/696517
        cap_add:
            - SYS_NICE

    php:
        # Comes from the Dockerfile we talked about earlier
        build: docker/php
        container_name: bookmark_php
        # We will mount our application code in this directory
        volumes:
            - ./:/var/www
        restart: always
        # Connect this to the common network
        networks:
            - bookmark-network

# Common network among all the machines
networks:
    bookmark-network:

volumes:
    bookmark-mysql-data:

</code></pre>

<p>This is the version used in production, so without Apache.</p>

<p>Now the version for local dev</p>

<h2 id="development">Development</h2>

<p>As you probably now, docker-compose config files cascade (like CSS), and we can supersede options
Again I added comment strait in the file for context.</p>

<p><code class="filepath">file:///docker-compose-dev.yml</code></p>

<pre><code class="language-yaml">
version: &quot;3.3&quot;
services:

    database:
        # For local development I expose the database
        # Expose port 3306 (mysql default) and bind it to 3307 on the local machine
        ports:
          - &quot;3307:3306&quot;
        # Not auto-restarting the container in local
        restart: &quot;no&quot;

    # I love this project for dev purpose, I let you check more about it here: https://github.com/maildev/maildev
    # it&#039;s optional and I won&#039;t go in detail about it now
    mail:
        image: maildev/maildev
        container_name: bookmark_maildev
        command: bin/maildev --web 80 --smtp 25 --hide-extensions STARTTLS
        ports:
          - &quot;8083:80&quot;
        restart: &quot;no&quot;
        networks:
            - bookmark-network

    php:
        # Not auto-restarting the container in local
        restart: &quot;no&quot;

    apache:
        # For local development I set up an Apache server
        # It comes from the Dockerfile we talked about earlier
        build: docker/apache
        container_name: bookmark_apache
        # Start after those image
        depends_on:
            - php
            - database
        # Expose port 80 and bind it to 9001 on the local machine
        ports:
            - &quot;9001:80&quot;
        volumes:
            # We will mount our application code in this directory
            - ./:/var/www
            # This one is to allow us to set up apache vhosts (see below)
            - ./docker/apache/conf:/etc/apache2/sites-enabled
        restart: &quot;no&quot;
        networks:
            - bookmark-network

</code></pre>

<h2 id="glue-in-between">Glue in between</h2>

<p>Be it in production or development, having apache on the server or in a docker image,
you know have to redirect web request to PHP FPM</p>

<p>This is done with an Apache config file (here called <code>vhosts.conf</code> for historical reasons)</p>

<p>This config file is similar between a production environment and a dev environment,
main differences will be explained in inline comments</p>

<p>Note: the base version here is the dev environment.</p>

<p><code class="filepath">file:///apache/conf/vhosts.conf</code></p>

<pre><code class="language-apache">
ServerName localhost
# Listening on port 80, I use cloudflare, and they handle the SSL part,
# otherwise you will need a second similar section for SSL
&lt;VirtualHost *:80&gt;
    # Follow important Auth headers
    SetEnvIfNoCase ^Authorization$ &quot;(.+)&quot; HTTP_AUTHORIZATION=$1

    # Define our app directory
    DocumentRoot /var/www/public

    # Rule to redirect request to PHP files to our PHP docker image
    # in production environment you would have to expose the PHP docker image and update the fcgi uri below with the right hostname and port
    &lt;FilesMatch \.php$&gt;
        SetHandler proxy:fcgi://php:9000
    &lt;/FilesMatch&gt;

    # Rules for our main directory
    &lt;Directory /var/www/public&gt;
        # Will rewrite requests
        RewriteEngine On

        # If the request is a file or a directory, skip the rewrite
        RewriteCond %{REQUEST_FILENAME} !-f
        RewriteCond %{REQUEST_FILENAME} !-d

        # Remove the index.php from the URL
        RewriteRule ^(.*)$ index.php [QSA,L]

        # Other quite basic config
        # see apache doc
        AllowOverride None
        Require all granted
        Allow from All
        FallbackResource /index.php
    &lt;/Directory&gt;

    # These are basic configuration option (optional)
    # see apache doc
    &lt;Directory /var/www&gt;
        Options FollowSymlinks
    &lt;/Directory&gt;

    &lt;Directory /var/www/public/build&gt;
        DirectoryIndex disabled
        FallbackResource disabled
    &lt;/Directory&gt;

    CustomLog /proc/self/fd/1 common
    ErrorLog /proc/self/fd/2

&lt;/VirtualHost&gt;

</code></pre>

<p><link rel="stylesheet" href="/assets/css/monokai.min.css">
<script type="text/javascript" src="/assets/js/highlight.min.js"></script>
<script>hljs.highlightAll();</script></p>
]]></content>
    </entry>
        <entry>
        <title type="html"><![CDATA[Squared Sin()]]></title>
        <link href="/2021/03/17/generative"/>
        <updated>2021-03-17T00:00:00+00:00</updated>
        <id>/2021/03/17/generative</id>
        <content type="html"><![CDATA[<p>This has been made with custom code.<br />
Details: basically playing with the Sin() math function and gradients.</p>

<p>You can make your own here: <a href="https://jerome.gangneux.net/experiments/sq/">experiments/sq</a></p>

<p><section id="gallery">
    <h2>Gallery</h2>
    <div class="mx-auto max-w-2xl mt-6">
        <div class="text-center">Click for more screenshots</div>
        <div class="shadow-2xl relative">
                        <div class="mySlides"><img class="image1 w-full w-full" src="/images/projects/generative/sq_0.png"></div>
                        <div class="mySlides"><img class="image2 w-full w-full" src="/images/projects/generative/sq_1.png"></div>
                        <div class="mySlides"><img class="image3 w-full w-full" src="/images/projects/generative/sq_2.png"></div>
                        <div class="mySlides"><img class="image4 w-full w-full" src="/images/projects/generative/sq_3.png"></div>
                        <div class="mySlides"><img class="image5 w-full w-full" src="/images/projects/generative/sq_4.png"></div>
                        <div class="mySlides"><img class="image6 w-full w-full" src="/images/projects/generative/sq_5.png"></div>
                        <div class="mySlides"><img class="image7 w-full w-full" src="/images/projects/generative/sq_6_fire.png"></div>
                        <div class="mySlides"><img class="image8 w-full w-full" src="/images/projects/generative/sq_7.png"></div>
                        <div class="mySlides"><img class="image9 w-full w-full" src="/images/projects/generative/sq_8.png"></div>
                        <div class="mySlides"><img class="image10 w-full w-full" src="/images/projects/generative/sq_9_barcode.png"></div>
                        <div class="mySlides"><img class="image11 w-full w-full" src="/images/projects/generative/sq_10_ocean.png"></div>
                        <div class="mySlides"><img class="image12 w-full w-full" src="/images/projects/generative/sq_11_vibrate.png"></div>
                        <div class="mySlides"><img class="image13 w-full w-full" src="/images/projects/generative/sq_12.png"></div>
                        <div class="mySlides"><img class="image14 w-full w-full" src="/images/projects/generative/sq_13_pool.png"></div>
                        <div class="mySlides"><img class="image15 w-full w-full" src="/images/projects/generative/sq_14_grass.png"></div>
                        <div class="mySlides"><img class="image16 w-full w-full" src="/images/projects/generative/sq_15.png"></div>
                        <div class="mySlides"><img class="image17 w-full w-full" src="/images/projects/generative/sq_16.png"></div>
                        <span class="absolute left-0 inset-y-0 flex items-center px-4 dark:text-pink-600 text-pink-500 cursor-pointer text-3xl font-extrabold" style="z-index: 11;" onclick="plusSlides(-1)">❮</span>
            <span class="absolute right-0 inset-y-0 flex items-center px-4 dark:text-pink-600 text-pink-500 cursor-pointer text-3xl font-extrabold" style="width: 100%;z-index: 10;justify-content: flex-end;" onclick="plusSlides(1)">❯</span>
        </div>
    </div>

    <script>
    var slideIndex = 1;
    showSlides(slideIndex);

    function plusSlides(n) { showSlides(slideIndex += n); return false; }
    function showSlides(n) {
        var i;
        var slides = document.getElementsByClassName("mySlides");
        if (n > slides.length) {
            slideIndex = 1
        }
        if (n < 1) {
            slideIndex = slides.length
        }
        for (i = 0; i < slides.length; i++) {
            slides[i].style.display = "none";
        }
        slides[slideIndex - 1].style.display = "block";
    }
    </script>
</section>
</p>

<h2 id="for-sale">For sale</h2>

<p>Those art piece are for sale, they come with:</p>

<ul>
<li>Access to the <a href="/images/projects/generative/code_generator_screen.jpg">full generator</a> that will allow you to make an tweak similar art</li>
<li>Documentation to understand the code</li>
</ul>

<p>contact me!</p>
]]></content>
    </entry>
        <entry>
        <title type="html"><![CDATA[From Movies]]></title>
        <link href="/2021/02/17/generative-movies"/>
        <updated>2021-02-17T00:00:00+00:00</updated>
        <id>/2021/02/17/generative-movies</id>
        <content type="html"><![CDATA[<p>Videos with sound generated from existing movies.</p>

<p>This has been made with custom code.<br />
Details: for a given movie,</p>

<p>1/ Getting the average color of each frame, then putting pixel after pixel on the video<br />
2/ Generating a music track from each color component (R/G/B) for the kick, piano, bass<br />
3/ Merge all in the video at 200fps</p>

<h2 id="matrix">Matrix</h2>

<iframe src="https://player.vimeo.com/video/529744282?title=0&amp;byline=0&amp;portrait=0" width="100%" height="394" class="center" frameborder="0" allowfullscreen></iframe>

<p><br>
Note: the final video does not suffer from any compression artifacts.</p>

<p>I my opinion, one of the best parts is around 4:30 
where something very bright happen in the movie and is well reflected in the soundtrack</p>

<p>The final image resulting from the process looks like:
<!-- I hope this will make someone lol --><center>
<img class="shadow-2xl center" src="https://jerome.gangneux.net/images/upload/m_1px_raw.png" />
</center></p>

<h2 id="kill-bill">Kill Bill</h2>

<iframe src="https://player.vimeo.com/video/529745381?title=0&amp;byline=0&amp;portrait=0" width="100%" height="394" class="center" frameborder="0" allowfullscreen></iframe>

<p><br>
Note: the final video does not suffer from any compression artifacts.</p>

<h2 id="for-sale">For sale</h2>

<p>Those art piece are for sale, they come with:</p>

<ul>
<li>Full quality video with audio</li>
<li>Full quality audio track</li>
<li>Final image</li>
<li>Intermediate files used to generate the video and audio</li>
<li>Code made to generate that particular piece</li>
<li>Documentation to understand the code</li>
</ul>

<p>contact me!</p>
]]></content>
    </entry>
    </feed>