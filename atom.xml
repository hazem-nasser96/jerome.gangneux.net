<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Jérôme Gangneux]]></title>
    <link href="/atom.xml" rel="self"/>
    <link href="/"/>
    <updated>2021-10-10T19:36:15+00:00</updated>
    <id>/</id>
        <author>
        <name><![CDATA[jrmgx]]></name>            </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
        <entry>
        <title type="html"><![CDATA[Command line tools]]></title>
        <link href="/2021/08/10/command-line-tools"/>
        <updated>2021-08-10T00:00:00+00:00</updated>
        <id>/2021/08/10/command-line-tools</id>
        <content type="html"><![CDATA[<h1 id="introduction">Introduction</h1>

<p>I am a big fan of command line utilities and scripts, so I wanted to share with you some tricks I learned and scripts I use.
Some are only a command with notable options, more like a memo of how to use them, other are homemade scripts.</p>

<h1 id="basics">Basics</h1>

<h2 id="find-and-related">Find and related</h2>

<p>Find allows you to apply some quite powerful command to your files, you can query it so it gets only specifics files and then pipe them to some command.</p>

<pre><code class="bash">find . -type f \ # Find all file (only of type: file, not directories)
    ! -mtime 60 \ # Where modification time is greater (!) than 60 days
    --exec rm "{}" -f \; # Exec that command (rm -f here)
# Note: using xargs is faster, so we can do something similar:
find . -name .svn \ # Find all file with name '.svn'
    -print0 \ # Send the list to (null padded)
    | xargs -0 \ # Get the list from (null padded)
    rm -rf # Current command (rm -f here)
# Find file by extended regex
find -E . -regex ".*\.(php|sh)"
</code></pre>

<p><br>
<code>xargs</code> allows you to build/execute a command from an input that you get on the pipe.</p>

<pre><code class="bash"># -I % defines "%" as the placeholder
cat foo.txt | xargs -I % sh -c "echo %; mkdir %;"
</code></pre>

<p><br></p>

<h3 id="find-in-combination-with-other-utilities">Find in combination with other utilities</h3>

<pre><code class="bash"># Copy all mp4 file to /tmp
find . -type f -iname "*.mp4" -exec cp "{}" /tmp \;
# Update all C# file "end of line" from windows to unix (dos2unix)
find . -type f -iname "*.cs" -exec dos2unix "{}" \;
# Rename all file, replacing 'Screenshot-' by 'Screen_'
find . -exec rename -s "Screenshot-" "Screen_" "{}" \;
# For each jpg, get the exif meta or add a macos tag if not found (-I % defines the placeholder)
find . -iname "*.jpg" -print0 | xargs -I % -0 bash -c 'exiftool "%" | grep -i "create date" || tag -a missingExif "%"'
# You can have complex queries for find with \( \) and -o
find . \( -iname "*.html" -o -iname "*.php" \) -print0 | xargs -I % -0 bash -c 'echo "%";'
</code></pre>

<h2 id="curl">CURL</h2>

<p>Curl makes web requests, it's very powerful for basic and not-so basic requests, allowing you to download files, forge request and even interact with API.</p>

<pre><code class="bash">curl \
    -d "param1=value1&amp;param2=value2" \ # Post data
    -H "Content-Type: application/x-www-form-urlencoded" \ # This is the default with POST
    -X POST \ # Method
    URL
curl \
    -d "@data.txt" \ # Send this file "data.txt"
    -X POST \
    URL
curl \
    -d '{"key1":"value1", "key2":"value2"}' \ # Post data, here JSON
    -H "Content-Type: application/json" \ # Specific JSON header
    -X POST URL
</code></pre>

<h2 id="ffmpeg">FFMPEG</h2>

<p>ffmpeg is one of my favorite command line tool, I'm always amazed by what it's possible to do with it!<br />
I use it extensibly for some <a href="/2021/02/17/generative-movies">generative art pieces</a>.</p>

<pre><code class="bash"># Scaling
ffmpeg -i input.mp4 -vf scale=1024:768 output.mp4 
# Scaling and keep aspect ratio
ffmpeg -i input.mp4 -vf scale=320:-1 output.mp4 
# Cropping: "crop=out_width:out_height:x:y"
ffmpeg -i input.mp4 -filter:v "crop=480:360:0:60" output.mp4 
# Change speed: in this example accelerate by a factor ten (0.1*)
ffmpeg -i input.mp4 -filter:v "setpts=0.1*PTS" -an output.mp4 
# Convert GIF in video
ffmpeg -f gif -i image.gif -vcodec mpeg4 -y output.mp4 
# Get video duration
ffprobe -i input.mp4 -show_entries format=duration -v quiet -of csv="p=0"
</code></pre>

<p><br></p>

<h3 id="encode-from-image-list">Encode from image list</h3>

<pre><code class="bash">ffmpeg \
    -framerate 50 \ # Input framerate
    -i video_%06d.png \ # Image names (sprint pattern)
    -r 50 \ # Output framerate
    -pix_fmt yuv420p output.mp4
</code></pre>

<h2 id="rsync">Rsync</h2>

<p>Rsync is powerful and versatile, I'm using it for backups and remote server sync, but it can do way more!</p>

<pre><code class="bash"># Here I use it for basic one-way no-history archiving
rsync \
    --archive \ # implies: recursive ; preserve time, owner, group, perms ; copy symlinks as it
    --human-readable --progress \
    --delete \ # Delete the file on destination if not present on the source any more
    --exclude='node_modules' \ # Node ;-)
    /Users/jerome/projects /Volumes/Backup-disk # Source / Destination
# Synchronize the local directory with the distant one
sync --archive --verbose --delete \
    -e "ssh -p 22" \ # Remote shell to use (here ssh with option -P 22)
    static/ root@example.com:/var/www/
</code></pre>

<h1 id="macos-specific">MacOs specific</h1>

<p>I'm a macOS user, and I like this operating system because it is based on UNIX and thus has great command line support.</p>

<pre><code class="bash"># Will make your mac speak
say "a sentence" 
# Copy/past from the term
echo "copy that" | pbcopy 
pbpaste
# Similar to unix locate, find a file on your machine
mdfind 
# Mount a disk image
hdiutil attach diskimage.dmg 
# Change the time between two time machine saves
sudo defaults write /System/Library/LaunchDaemons/com.apple.backupd-auto StartInterval -int 1800 # seconds
</code></pre>

<h1 id="general-shell">General shell</h1>

<pre><code class="bash"># Redirect the error output to the standard output (stderr to stdout)
echo 'test' 2&gt;&amp;1
# Mount a distant directory to the local filesystem
sshfs username@example.com:/directory directory
# Delete the line LINE_NUMBER in the file
sed 'LINE_NUMBERd' file
# Stop/continue a process by pid
kill -s STOP/CONT PID
# Create an archive for this directory
tar -cvzf archive.tar.gz directory
# Extract the given tarball
tar -xvf archive.tar.gz
# Generate a new key pair
ssh-keygen -t dsa
# Change extended permissions on a file
setfacl -Rm u:username:rw directory
# Convert windows line ending file to unix
dos2unix 
# Add user (username) to group
usermod -a -G group username 
</code></pre>

<h1 id="specific-tools">Specific tools</h1>

<h2 id="firewall">Firewall</h2>

<p>On my Linux server I use ufw (Uncomplicated Firewall), and it holds its promise!
See it in action below:</p>

<pre><code class="bash">ufw allow 22 # ssh
ufw allow 443 # https
ufw allow 80 # http
ufw enable
</code></pre>

<h2 id="mosh">Mosh</h2>

<p>I use <a href="https://mosh.org">Mosh</a></p>

<blockquote>
  <p>Mosh (mobile shell)</p>
  
  <p>It's a remote terminal application that allows roaming, supports intermittent connectivity, and provides intelligent local echo and line editing of user keystrokes.</p>
  
  <p>Mosh is a replacement for interactive SSH terminals. It's more robust and responsive, especially over Wi-Fi, cellular, and long-distance links.</p>
  
  <p>Mosh is free software, available for GNU/Linux, BSD, macOS, Solaris, Android, Chrome, and iOS.</p>
</blockquote>

<h2 id="ngrok">ngrok</h2>

<p>I use <a href="https://ngrok.com">ngrok</a></p>

<p>This is a proprietary tool, but still, it has a free tier that is enough for me.<br />
It may exist some similar tools, do not hesitate to contact me!</p>

<blockquote>
  <p>Ngrok exposes local servers behind NATs and firewalls to the public internet over secure tunnels.</p>
</blockquote>

<h1 id="my-own-scripts">My Own scripts</h1>

<h2 id="filename-%2F-extname">filename / extname</h2>

<p>Similar to <code>basename</code>, I've often needed to get the filename (without extension) or the extension of a given file in my scripts.<br />
I added them in my path, so they are accessible when needed.</p>

<p><code class="filepath">filename</code></p>

<pre><code class="language-bash">#!/bin/bash

if [[ $# -ne 1 ]]
then
    echo &quot;usage: $0 \&quot;filename.ext\&quot;&quot;
    echo &quot;Returns filename without extension&quot;
    echo &quot;Note: it applies basename before&quot;
    exit 2
fi

BASENAME=&quot;$(basename &quot;$1&quot;)&quot;
EXTENSION=&quot;${BASENAME##*.}&quot;
FILENAME=&quot;${BASENAME%.*}&quot;

echo &quot;${FILENAME}&quot;
exit 0</code></pre>

<p><br>
<code class="filepath">extname</code></p>

<pre><code class="language-bash">#!/bin/bash

if [[ $# -ne 1 ]]
then
    echo &quot;usage: $0 \&quot;filename.ext\&quot;&quot;
    echo &quot;Returns filename&#039;s extension&quot;
    echo &quot;Note: it applies basename before&quot;
    exit 2
fi

BASENAME=&quot;$(basename &quot;$1&quot;)&quot;
EXTENSION=&quot;${BASENAME##*.}&quot;
FILENAME=&quot;${BASENAME%.*}&quot;

echo &quot;${EXTENSION}&quot;
exit 0</code></pre>

<h2 id="retime">Retime</h2>

<p>This script is more specific to my needs, but still I think it can be useful to someone.<br />
It will try to rename a media file with the date/time of creation.<br />
Note: it uses PHP and exiftool to work.</p>

<p><code class="filepath">retime</code></p>

<pre><code class="language-php">#!/usr/bin/env php
&lt;?php

function stdout($message)
{
    echo $message.&quot;\n&quot;;
}

if (2 != count($argv)) {
    stdout(&#039;Rename media files to their original creation time (if possible)&#039;);
    stdout(&quot;Usage {$argv[0]} source_media&quot;);

    exit(1);
}

function exiftool(string $file): array
{
    $output = shell_exec(&#039;exiftool &#039;.escapeshellarg($file));
    $data = [];
    foreach (explode(&quot;\n&quot;, $output) as $line) {
        $l = explode(&#039;:&#039;, $line, 2);
        $data[trim($l[0])] = trim($l[1]);
    }

    return $data;
}

$file = $argv[1];
$directory = dirname($file);
$extension = pathinfo($file, PATHINFO_EXTENSION);
$data = exiftool($file);

if (isset($data[&#039;Creation Date&#039;])) {
    $exifDate = $data[&#039;Creation Date&#039;];
} elseif (isset($data[&#039;Date Time Original&#039;])) {
    $exifDate = $data[&#039;Date Time Original&#039;];
} else {
    stdout(&quot;Can not find relevant exif information for {$file}&quot;);

    exit(1);
}

$date = date_create($exifDate);
if (!$date) {
    stdout(&quot;Can not parse date for {$file}&quot;);

    exit(2);
}

$name = $date-&gt;format(&#039;Y-m-d H-i-s&#039;).&#039;.&#039;.$extension;
$destination = $directory.DIRECTORY_SEPARATOR.$name;

if (file_exists($destination)) {
    stdout(&quot;A file with that name already exist {$name} for file {$file}&quot;);

    exit(3);
}

rename($file, $destination);
$touchDate = $date-&gt;format(&#039;YmdHi.s&#039;);
shell_exec(&#039;touch -t &#039;.$touchDate.&#039; &#039;.escapeshellarg($destination));
stdout(&quot;Success: {$file} renamed in {$destination}&quot;);

exit(0);
</code></pre>

<h2 id="doubloons">Doubloons</h2>

<p>This script looks for file doubloons in the current and sub-directories.<br />
Note: it's a PHP script that use a SQLite database.</p>

<p><code class="filepath">doubloons</code></p>

<pre><code class="language-php">#!/usr/bin/env php
&lt;?php

const DB_FILE_NAME = &#039;./doubloon.sqlite&#039;;
$shortOptions = [];
// Index options
$shortOptions[&#039;e:&#039;] = &#039;File extension to check ; coma separated ; case insensitive ; default: &quot;jpg,jpeg,gif,png&quot;&#039;;
$shortOptions[&#039;s:&#039;] = &#039;Hash algorithm used ; available: md5, sha1 ; default &quot;md5&quot;&#039;;
$shortOptions[&#039;r&#039;] = &#039;Reset/rebuild index&#039;;
// Program options
$shortOptions[&#039;f&#039;] = &#039;For a given doubloon ; keep the first and delete the others ; default: interactive mode: ask&#039;;
$shortOptions[&#039;h&#039;] = &#039;This help&#039;;

$options = array_merge([
    &#039;e&#039; =&gt; &#039;jpg,jpeg,gif,png&#039;,
    &#039;s&#039; =&gt; &#039;md5&#039;,
], getopt(implode(array_keys($shortOptions)), []));

function stdout($message)
{
    echo $message.&quot;\n&quot;;
}

function sqlite(bool $create)
{
    $sql = new SQLite3(DB_FILE_NAME);
    if ($create) {
        $sql-&gt;exec(&#039;CREATE TABLE &quot;file&quot; (&quot;path&quot; text NOT NULL, &quot;hash&quot; varchar NOT NULL, PRIMARY KEY (path));&#039;);
    }

    return $sql;
}

function findDoubloons()
{
    $hashes = [];
    $db = sqlite(false);
    $result = $db-&gt;query(&#039;SELECT * FROM `file` WHERE `hash` IN (
        SELECT `hash` FROM `file` GROUP BY `hash` HAVING COUNT(*) &gt;= 2
    )&#039;);
    while (($row = $result-&gt;fetchArray(SQLITE3_ASSOC))) {
        $hashes[$row[&#039;hash&#039;]][] = $row[&#039;path&#039;];
    }

    return $hashes;
}

function index(string $directory, string $extensions, string $hashAlgo)
{
    stdout(&#039;Building index...&#039;);
    $extensionsRegex = &#039;`\.(&#039;.str_replace(&#039;,&#039;, &#039;|&#039;, preg_quote($extensions)).&#039;)$`i&#039;;
    $find = shell_exec(&#039;find -L &quot;&#039;.$directory.&#039;&quot;&#039;); // -L to follow symlinks
    $data = explode(&quot;\n&quot;, $find);
    $db = sqlite(true);
    foreach ($data as $line) {
        $line = trim($line);
        if (!preg_match($extensionsRegex, $line)) {
            continue;
        }
        if (&#039;sha1&#039; === $hashAlgo) {
            $hash = sha1_file($line);
        } else {
            $hash = md5_file($line);
        }
        $statement = $db-&gt;prepare(&#039;INSERT OR IGNORE INTO `file` VALUES (:path, :hash);&#039;);
        $statement-&gt;bindParam(&#039;:path&#039;, $line, SQLITE3_TEXT);
        $statement-&gt;bindParam(&#039;:hash&#039;, $hash, SQLITE3_TEXT);
        $statement-&gt;execute();

        stdout($line.&#039;: &#039;.$hash);
    }

    stdout(&#039;done.&#039;);

    exit(0);
}

function remove($interactive)
{
    $hashes = findDoubloons();
    $delete = [];
    $progress = 0;
    $total = count($hashes);
    stdout(&#039;Started, type 99 to finish...&#039;);
    foreach ($hashes as $hash =&gt; $paths) {
        ++$progress;
        stdout(&quot;Found doubloons ({$progress}/{$total}):&quot;);
        stdout(&#039;    0. No action&#039;);
        $candidates = [];
        $c = 0;
        foreach ($paths as $path) {
            ++$c;
            $candidates[$c] = $path;
            stdout(&quot;    {$c}. {$path}&quot;);
        }
        if (!$interactive) {
            $action = 1;
        } else {
            $action = (int) trim(readline(&quot;&gt; keep [0-{$c}]: &quot;));
        }
        if (0 == $action) {
            continue;
        }
        if (99 == $action) {
            break;
        }
        unset($candidates[$action]);
        $delete = array_merge($delete, array_values($candidates));
    }
    stdout(&quot;Double check everything and execute:\n&quot;);
    foreach ($delete as $d) {
        stdout(&#039;rm &quot;&#039;.$d.&#039;&quot;&#039;);
    }
    stdout(&#039;rm &#039;.DB_FILE_NAME);

    return $delete;
}

if (array_key_exists(&#039;h&#039;, $options)) {
    stdout(&quot;Usage: {$argv[0]} [options]&quot;);
    foreach ($shortOptions as $name =&gt; $message) {
        $name = trim($name, &#039;:&#039;);
        stdout(&quot;    -{$name}    {$message}&quot;);
    }

    exit(0);
}

if (array_key_exists(&#039;r&#039;, $options)) {
    @unlink(DB_FILE_NAME);
}

if (!file_exists(DB_FILE_NAME)) {
    // No index exist in this directory, build one
    index(&#039;.&#039;, $options[&#039;e&#039;], $options[&#039;s&#039;]);
} else {
    // the index already exist, start the program
    remove(!array_key_exists(&#039;f&#039;, $options));
}
</code></pre>

<h2 id="other-custom-made-scripts">Other custom made scripts</h2>

<p>I made other scripts that are probably to specific and too messy to be published here,
one I like an used a lot was a PHP script (+ command line tools) that split a mbox file and extract message/attachment to a database. 
Worked well to save my emails when I left gmail. Let me know if you are interested :)</p>

<p><link rel="stylesheet" href="/assets/css/monokai.min.css">
<script type="text/javascript" src="/assets/js/highlight.min.js"></script>
<script>hljs.highlightAll();</script></p>
]]></content>
    </entry>
        <entry>
        <title type="html"><![CDATA[Apache + PHP FPM + Mysql with docker]]></title>
        <link href="/2021/06/24/apache-php-fpm-mysql-docker"/>
        <updated>2021-06-24T00:00:00+00:00</updated>
        <id>/2021/06/24/apache-php-fpm-mysql-docker</id>
        <content type="html"><![CDATA[<h1 id="introduction">Introduction</h1>

<p>It was about time, I decided to update my stack and use docker on my servers.</p>

<p>For the ones that follows me I usually prefer to set up a bare metal server with Debian Apache PHP and MySQL installed on it.<br />
My excuses — if I even need some — were a mix between performances and simplicity.</p>

<p>But today I'm experimenting with multiple small projects, and they all are on the same server.
It's still a bare metal server, and I'm not — yet — changing this for a cloud provider, we can talk about this in another blog post.</p>

<p>Multiple projects with a single server can lead to some incompatible dependencies,
in my specific scenario I need some PHP extension that is obsolete and works only with older PHP version, but I don't want to carry this limitation to all my projects.</p>

<p>Why Apache and not Nginx? <a href="https://youtu.be/-rmf5EqJVDw?t=16">No reason &copy;</a>.</p>

<p>Let's see how I built my LAMP stack with Docker (should we say DAMP?)</p>

<h1 id="php">PHP</h1>

<p>I used the <code>php:7.4-fpm</code> base image and added some extensions, those vary depending on the current project.</p>

<p>I added composer because it's always handy to have it there, plus, and this may be up for discussion, I added NodeJS + PM2 in this image too.</p>

<p>Node is often needed for the front end (compiling asset and such) and I did not want the complexity of another image (but I'm open for comment/PR on this one)
as well as <a href="pm2.keymetrics.io/">PM2</a> that I use for my background scripts. 
For example like this: <code>pm2 start --name php_messenger_consume php -- bin/console -n messenger:consume async --limit=10 --memory-limit=128M --time-limit=3600</code></p>

<p>It's very handy to have it on the same image as PHP, and does not look even possible otherwise (let me know in the comments).</p>

<p><code class="filepath">file:///docker/php/Dockerfile</code></p>

<pre><code class="language-dockerfile">
FROM php:7.4-fpm

# PHP and related
RUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \
        locales \
        apt-utils \
        git \
        g++ \
        libicu-dev \
        libpng-dev \
        libxml2-dev \
        libzip-dev \
        libonig-dev \
        libxslt-dev \
        unzip \
        libfreetype6-dev \
        libjpeg62-turbo-dev \
    &amp;&amp; docker-php-ext-configure gd --with-freetype --with-jpeg \
    &amp;&amp; docker-php-ext-configure intl \
    &amp;&amp; docker-php-ext-install \
        pdo \
        pdo_mysql \
        opcache \
        intl \
        zip \
        calendar \
        dom \
        mbstring \
        gd \
        xsl \
    &amp;&amp; pecl install apcu \
    &amp;&amp; docker-php-ext-enable apcu \
\
    &amp;&amp;  curl -sS https://getcomposer.org/installer | php -- \
    &amp;&amp;  mv composer.phar /usr/local/bin/composer

RUN mv &quot;$PHP_INI_DIR/php.ini-production&quot; &quot;$PHP_INI_DIR/php.ini&quot;

# Node 14 and related
RUN curl -fsSL https://deb.nodesource.com/setup_14.x | bash - \
    &amp;&amp; apt-get install -y --no-install-recommends nodejs \
    &amp;&amp; npm install pm2@5.0 -g \
    &amp;&amp; pm2 install pm2-logrotate \
    &amp;&amp; pm2 set pm2-logrotate:compress true

</code></pre>

<h1 id="apache">Apache</h1>

<p>This on is a bit more tricky.</p>

<p>First on my production server I won't use it, the server will have a real Apache with vhosts configured properly forwarding to each different projects.
Those final vhosts will look similar to the one below that I use in the development image.</p>

<p>So for the dev env (hence the <code>docker-compose-dev.yml</code> coming up below) it will have Apache.</p>

<p>The goal is to redirect the query that hit the server to PHP FPM.</p>

<p>For this, I first tried to use the base image <code>httpd:2.4</code> it seemed logic to me but for some reason I never succeeded to make it work, (have you? PR welcome).
I ended up using a debian base <code>debian:buster-slim</code> and installed Apache on my own (probably not optimal, but we are on a dev environment).</p>

<p>It has <em>mod proxy fast CGI</em> and <em>mod rewrite</em> activated as we will use it in our config.</p>

<p><code class="filepath">file:///docker/apache/Dockerfile</code></p>

<pre><code class="language-dockerfile">
FROM debian:buster-slim

RUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \
    apache2 \
    &amp;&amp; a2enmod proxy_fcgi \
    &amp;&amp; a2enmod rewrite

CMD /usr/sbin/apache2ctl -D FOREGROUND

</code></pre>

<h1 id="mysql">MySQL</h1>

<p>I'm using the base image <code>mysql</code> with some options like <code>MYSQL_ALLOW_EMPTY_PASSWORD</code> and <code>cap_add: SYS_NICE</code>. 
The later prevent the error message "mbind: Operation not permitted" as seen on <a href="https://stackoverflow.com/a/55706057/696517">stackoverflow.com</a></p>

<h1 id="connecting-everything-together">Connecting everything together</h1>

<p>The idea now it to put everything together:</p>

<ul>
<li>Apache will be exposed to some port and redirect requests to PHP-FPM.</li>
<li>PHP will be able to connect to the database.</li>
<li>And also we can use PHP as a command line on our server to execute PHP commands.</li>
</ul>

<p>I added comments on the file directly, so you have the context.</p>

<p><small>Note: the name of the project is "bookmark" in this example</small></p>

<h2 id="production">Production</h2>

<p><code class="filepath">file:///docker-compose.yml</code></p>

<pre><code class="language-yaml">
version: &quot;3.3&quot;
services:

    database:
        image: mysql
        container_name: bookmark_mysql
        restart: always
        # We set up a docker volume to store our database data
        volumes:
            - bookmark-mysql-data:/var/lib/mysql
        environment:
            MYSQL_ALLOW_EMPTY_PASSWORD: &quot;yes&quot;
        networks:
            - bookmark-network
        # This option fix the &quot;mbind: Operation not permitted&quot; error that pops in the logs
        # https://stackoverflow.com/a/55706057/696517
        cap_add:
            - SYS_NICE

    php:
        # Comes from the Dockerfile we talked about earlier
        build: docker/php
        container_name: bookmark_php
        # We will mount our application code in this directory
        volumes:
            - ./:/var/www
        restart: always
        # Connect this to the common network
        networks:
            - bookmark-network

# Common network among all the machines
networks:
    bookmark-network:

volumes:
    bookmark-mysql-data:

</code></pre>

<p>This is the version used in production, so without Apache.</p>

<p>Now the version for local dev</p>

<h2 id="development">Development</h2>

<p>As you probably now, docker-compose config files cascade (like CSS), and we can supersede options
Again I added comment strait in the file for context.</p>

<p><code class="filepath">file:///docker-compose-dev.yml</code></p>

<pre><code class="language-yaml">
version: &quot;3.3&quot;
services:

    database:
        # For local development I expose the database
        # Expose port 3306 (mysql default) and bind it to 3307 on the local machine
        ports:
          - &quot;3307:3306&quot;
        # Not auto-restarting the container in local
        restart: &quot;no&quot;

    # I love this project for dev purpose, I let you check more about it here: https://github.com/maildev/maildev
    # it&#039;s optional and I won&#039;t go in detail about it now
    mail:
        image: maildev/maildev
        container_name: bookmark_maildev
        command: bin/maildev --web 80 --smtp 25 --hide-extensions STARTTLS
        ports:
          - &quot;8083:80&quot;
        restart: &quot;no&quot;
        networks:
            - bookmark-network

    php:
        # Not auto-restarting the container in local
        restart: &quot;no&quot;

    apache:
        # For local development I set up an Apache server
        # It comes from the Dockerfile we talked about earlier
        build: docker/apache
        container_name: bookmark_apache
        # Start after those image
        depends_on:
            - php
            - database
        # Expose port 80 and bind it to 9001 on the local machine
        ports:
            - &quot;9001:80&quot;
        volumes:
            # We will mount our application code in this directory
            - ./:/var/www
            # This one is to allow us to set up apache vhosts (see below)
            - ./docker/apache/conf:/etc/apache2/sites-enabled
        restart: &quot;no&quot;
        networks:
            - bookmark-network

</code></pre>

<h2 id="glue-in-between">Glue in between</h2>

<p>Be it in production or development, having apache on the server or in a docker image,
you know have to redirect web request to PHP FPM</p>

<p>This is done with an Apache config file (here called <code>vhosts.conf</code> for historical reasons)</p>

<p>This config file is similar between a production environment and a dev environment,
main differences will be explained in inline comments</p>

<p>Note: the base version here is the dev environment.</p>

<p><code class="filepath">file:///apache/conf/vhosts.conf</code></p>

<pre><code class="language-apache">
ServerName localhost
# Listening on port 80, I use cloudflare, and they handle the SSL part,
# otherwise you will need a second similar section for SSL
&lt;VirtualHost *:80&gt;
    # Follow important Auth headers
    SetEnvIfNoCase ^Authorization$ &quot;(.+)&quot; HTTP_AUTHORIZATION=$1

    # Define our app directory
    DocumentRoot /var/www/public

    # Rule to redirect request to PHP files to our PHP docker image
    # in production environment you would have to expose the PHP docker image and update the fcgi uri below with the right hostname and port
    &lt;FilesMatch \.php$&gt;
        SetHandler proxy:fcgi://php:9000
    &lt;/FilesMatch&gt;

    # Rules for our main directory
    &lt;Directory /var/www/public&gt;
        # Will rewrite requests
        RewriteEngine On

        # If the request is a file or a directory, skip the rewrite
        RewriteCond %{REQUEST_FILENAME} !-f
        RewriteCond %{REQUEST_FILENAME} !-d

        # Remove the index.php from the URL
        RewriteRule ^(.*)$ index.php [QSA,L]

        # Other quite basic config
        # see apache doc
        AllowOverride None
        Require all granted
        Allow from All
        FallbackResource /index.php
    &lt;/Directory&gt;

    # These are basic configuration option (optional)
    # see apache doc
    &lt;Directory /var/www&gt;
        Options FollowSymlinks
    &lt;/Directory&gt;

    &lt;Directory /var/www/public/build&gt;
        DirectoryIndex disabled
        FallbackResource disabled
    &lt;/Directory&gt;

    CustomLog /proc/self/fd/1 common
    ErrorLog /proc/self/fd/2

&lt;/VirtualHost&gt;

</code></pre>

<p><link rel="stylesheet" href="/assets/css/monokai.min.css">
<script type="text/javascript" src="/assets/js/highlight.min.js"></script>
<script>hljs.highlightAll();</script></p>
]]></content>
    </entry>
        <entry>
        <title type="html"><![CDATA[Squared Sin()]]></title>
        <link href="/2021/03/17/generative"/>
        <updated>2021-03-17T00:00:00+00:00</updated>
        <id>/2021/03/17/generative</id>
        <content type="html"><![CDATA[<p>This has been made with custom code.<br />
Details: basically playing with the Sin() math function and gradients.</p>

<p>You can make your own here: <a href="https://jerome.gangneux.net/experiments/sq/">experiments/sq</a></p>

<p><section id="gallery">
    <h2>Gallery</h2>
    <div class="mx-auto max-w-2xl mt-6">
        <div class="text-center">Click for more screenshots</div>
        <div class="shadow-2xl relative">
                        <div class="mySlides"><img class="image1 w-full w-full" src="/images/projects/generative/sq_0.png"></div>
                        <div class="mySlides"><img class="image2 w-full w-full" src="/images/projects/generative/sq_1.png"></div>
                        <div class="mySlides"><img class="image3 w-full w-full" src="/images/projects/generative/sq_2.png"></div>
                        <div class="mySlides"><img class="image4 w-full w-full" src="/images/projects/generative/sq_3.png"></div>
                        <div class="mySlides"><img class="image5 w-full w-full" src="/images/projects/generative/sq_4.png"></div>
                        <div class="mySlides"><img class="image6 w-full w-full" src="/images/projects/generative/sq_5.png"></div>
                        <div class="mySlides"><img class="image7 w-full w-full" src="/images/projects/generative/sq_6_fire.png"></div>
                        <div class="mySlides"><img class="image8 w-full w-full" src="/images/projects/generative/sq_7.png"></div>
                        <div class="mySlides"><img class="image9 w-full w-full" src="/images/projects/generative/sq_8.png"></div>
                        <div class="mySlides"><img class="image10 w-full w-full" src="/images/projects/generative/sq_9_barcode.png"></div>
                        <div class="mySlides"><img class="image11 w-full w-full" src="/images/projects/generative/sq_10_ocean.png"></div>
                        <div class="mySlides"><img class="image12 w-full w-full" src="/images/projects/generative/sq_11_vibrate.png"></div>
                        <div class="mySlides"><img class="image13 w-full w-full" src="/images/projects/generative/sq_12.png"></div>
                        <div class="mySlides"><img class="image14 w-full w-full" src="/images/projects/generative/sq_13_pool.png"></div>
                        <div class="mySlides"><img class="image15 w-full w-full" src="/images/projects/generative/sq_14_grass.png"></div>
                        <div class="mySlides"><img class="image16 w-full w-full" src="/images/projects/generative/sq_15.png"></div>
                        <div class="mySlides"><img class="image17 w-full w-full" src="/images/projects/generative/sq_16.png"></div>
                        <span class="absolute left-0 inset-y-0 flex items-center px-4 dark:text-pink-600 text-pink-500 cursor-pointer text-3xl font-extrabold" style="z-index: 11;" onclick="plusSlides(-1)">❮</span>
            <span class="absolute right-0 inset-y-0 flex items-center px-4 dark:text-pink-600 text-pink-500 cursor-pointer text-3xl font-extrabold" style="width: 100%;z-index: 10;justify-content: flex-end;" onclick="plusSlides(1)">❯</span>
        </div>
    </div>

    <script>
    var slideIndex = 1;
    showSlides(slideIndex);

    function plusSlides(n) { showSlides(slideIndex += n); return false; }
    function showSlides(n) {
        var i;
        var slides = document.getElementsByClassName("mySlides");
        if (n > slides.length) {
            slideIndex = 1
        }
        if (n < 1) {
            slideIndex = slides.length
        }
        for (i = 0; i < slides.length; i++) {
            slides[i].style.display = "none";
        }
        slides[slideIndex - 1].style.display = "block";
    }
    </script>
</section>
</p>

<h2 id="for-sale">For sale</h2>

<p>Those art piece are for sale, they come with:</p>

<ul>
<li>Access to the <a href="/images/projects/generative/code_generator_screen.jpg">full generator</a> that will allow you to make an tweak similar art</li>
<li>Documentation to understand the code</li>
</ul>

<p>contact me!</p>
]]></content>
    </entry>
        <entry>
        <title type="html"><![CDATA[From Movies]]></title>
        <link href="/2021/02/17/generative-movies"/>
        <updated>2021-02-17T00:00:00+00:00</updated>
        <id>/2021/02/17/generative-movies</id>
        <content type="html"><![CDATA[<p>Videos with sound generated from existing movies.</p>

<p>This has been made with custom code.<br />
Details: for a given movie,</p>

<p>1/ Getting the average color of each frame, then putting pixel after pixel on the video<br />
2/ Generating a music track from each color component (R/G/B) for the kick, piano, bass<br />
3/ Merge all in the video at 200fps</p>

<h2 id="matrix">Matrix</h2>

<iframe src="https://player.vimeo.com/video/529744282?title=0&amp;byline=0&amp;portrait=0" width="100%" height="394" class="center" frameborder="0" allowfullscreen></iframe>

<p><br>
Note: the final video does not suffer from any compression artifacts.</p>

<p>I my opinion, one of the best parts is around 4:30 
where something very bright happen in the movie and is well reflected in the soundtrack</p>

<p>The final image resulting from the process looks like:
<!-- I hope this will make someone lol --><center>
<img class="shadow-2xl center" src="https://jerome.gangneux.net/images/upload/m_1px_raw.png" />
</center></p>

<h2 id="kill-bill">Kill Bill</h2>

<iframe src="https://player.vimeo.com/video/529745381?title=0&amp;byline=0&amp;portrait=0" width="100%" height="394" class="center" frameborder="0" allowfullscreen></iframe>

<p><br>
Note: the final video does not suffer from any compression artifacts.</p>

<h2 id="for-sale">For sale</h2>

<p>Those art piece are for sale, they come with:</p>

<ul>
<li>Full quality video with audio</li>
<li>Full quality audio track</li>
<li>Final image</li>
<li>Intermediate files used to generate the video and audio</li>
<li>Code made to generate that particular piece</li>
<li>Documentation to understand the code</li>
</ul>

<p>contact me!</p>
]]></content>
    </entry>
        <entry>
        <title type="html"><![CDATA[Artillery Royale]]></title>
        <link href="/2020/05/01/ChessBattle-game"/>
        <updated>2020-05-01T00:00:00+00:00</updated>
        <id>/2020/05/01/ChessBattle-game</id>
        <content type="html"><![CDATA[<h1 id="artillery-royale">Artillery Royale</h1>

<p>Want to know more? <a href="https://weheartprojects.com/2020/07/artillery-royale/">Follow the white rabbit</a></p>
]]></content>
    </entry>
        <entry>
        <title type="html"><![CDATA[La vie n&#039;a pas de sens.]]></title>
        <link href="/2020/03/01/la-vie-n-a-pas-de-sens"/>
        <updated>2020-03-01T00:00:00+00:00</updated>
        <id>/2020/03/01/la-vie-n-a-pas-de-sens</id>
        <content type="html"><![CDATA[<h1 id="la-vie-n%27a-pas-de-sens.">La vie n'a pas de sens.</h1>

<p>Vous voulez en savoir plus ? <a href="/la_vie_n_a_pas_de_sens">Suivez le lapin blanc</a></p>
]]></content>
    </entry>
        <entry>
        <title type="html"><![CDATA[Glitch Videos]]></title>
        <link href="/2019/11/01/glitch-video"/>
        <updated>2019-11-01T00:00:00+00:00</updated>
        <id>/2019/11/01/glitch-video</id>
        <content type="html"><![CDATA[<h2 id="selection-of-the-best-art">Selection of the best art</h2>

<p>Coming soon!</p>
]]></content>
    </entry>
        <entry>
        <title type="html"><![CDATA[Glitch Clip App]]></title>
        <link href="/2019/11/01/glitch-clip"/>
        <updated>2019-11-01T00:00:00+00:00</updated>
        <id>/2019/11/01/glitch-clip</id>
        <content type="html"><![CDATA[<p><strong>Note: This project has been acquired in 2020, I'm no longer the owner of Glitch Clip App</strong></p>

<p>Glitch Clip is an App for iPad that allows you to create generative videos thanks to some artsy visual effects (kaleidoscope, mosaic, twist and 20+ more) or to make creative VJing shows with live music.</p>

<h2 id="how-it-works">How it works</h2>

<p>1/ Select short video clips and start remixing it. Add effects (kaleidoscope, mosaic, twist and more) and glitch things!<br />
2/ Switch from one clip to another really fast, it's made for live performances. You can also import your own clips.<br />
3/ Explore generative art, fine tune your effect stack to make artsy videos you can then share with your friends!<br />
4/ Connect a keyboard or a MIDI controller to the app. From here everything is possible: play live from your controller or synchronize your DAW.</p>

<p>Glitch Clip is made for video DJing (VJing) but you can simply use it to have fun in your own way!
And of course you can also record and export your video.</p>

<p>You can find the old help page here: <a href="https://jerome.gangneux.net/glitch-clip/">Glitch Clip Help</a></p>

<p><section id="gallery">
    <h2>Gallery</h2>
    <div class="mx-auto max-w-2xl mt-6">
        <div class="text-center">Click for more screenshots</div>
        <div class="shadow-2xl relative">
                        <div class="mySlides"><img class="image1 w-full w-full" src="/images/projects/glitchclip/appstore/01.PNG"></div>
                        <div class="mySlides"><img class="image2 w-full w-full" src="/images/projects/glitchclip/twitter_card.jpg"></div>
                        <div class="mySlides"><img class="image3 w-full w-full" src="/images/projects/glitchclip/appstore/02.PNG"></div>
                        <div class="mySlides"><img class="image4 w-full w-full" src="/images/projects/glitchclip/review.png"></div>
                        <div class="mySlides"><img class="image5 w-full w-full" src="/images/projects/glitchclip/appstore/04.PNG"></div>
                        <div class="mySlides"><img class="image6 w-full w-full" src="/images/projects/glitchclip/appstore/07.PNG"></div>
                        <div class="mySlides"><img class="image7 w-full w-full" src="/images/projects/glitchclip/appstore/09.PNG"></div>
                        <div class="mySlides"><img class="image8 w-full w-full" src="/images/projects/glitchclip/midi.jpg"></div>
                        <div class="mySlides"><img class="image9 w-full w-full" src="/images/projects/glitchclip/appstore/06.PNG"></div>
                        <span class="absolute left-0 inset-y-0 flex items-center px-4 dark:text-pink-600 text-pink-500 cursor-pointer text-3xl font-extrabold" style="z-index: 11;" onclick="plusSlides(-1)">❮</span>
            <span class="absolute right-0 inset-y-0 flex items-center px-4 dark:text-pink-600 text-pink-500 cursor-pointer text-3xl font-extrabold" style="width: 100%;z-index: 10;justify-content: flex-end;" onclick="plusSlides(1)">❯</span>
        </div>
    </div>

    <script>
    var slideIndex = 1;
    showSlides(slideIndex);

    function plusSlides(n) { showSlides(slideIndex += n); return false; }
    function showSlides(n) {
        var i;
        var slides = document.getElementsByClassName("mySlides");
        if (n > slides.length) {
            slideIndex = 1
        }
        if (n < 1) {
            slideIndex = slides.length
        }
        for (i = 0; i < slides.length; i++) {
            slides[i].style.display = "none";
        }
        slides[slideIndex - 1].style.display = "block";
    }
    </script>
</section>
</p>
]]></content>
    </entry>
        <entry>
        <title type="html"><![CDATA[Alchemy Quest]]></title>
        <link href="/2019/03/01/alchemy-quest"/>
        <updated>2019-03-01T00:00:00+00:00</updated>
        <id>/2019/03/01/alchemy-quest</id>
        <content type="html"><![CDATA[<style>.post-header { display: none; }</style>

<h1><img src="/images/projects/AlchemyQuest/logo-screen.png" alt="Alchemy Quest"></h1>

<h2 id="pitch">Pitch</h2>

<p>The pleasure of an Alchemy game while adding the exploration part of an RPG.<br />
Stroll around, collect elements and combine to find them all!</p>

<p><a href="https://itunes.apple.com/WebObjects/MZStore.woa/wa/viewSoftware?id=1451729414&mt=8">Download the game on iOS</a><br></p>

<hr />

<p>With Alchemy Quest explore multiple worlds where life has mysteriously disappeared.
Collect items found here and there, combine them to find missing ones and bring these lands back to life.
Solve puzzles to move from one level to another.</p>

<p>You will meet various characters who will help you in your quest, starting with the Mage who is responsible for this mess.</p>

<p>Alchemy Quest is in between an Alchemy game and an RPG, this game is accessible to all.
Moving around is very simple: touch the screen and the character goes there.
The combinatorial mode is integrated in the RPG mode so that the game stay homogeneous.</p>

<h2 id="confidentiality">Confidentiality</h2>

<p><strong>Short version:</strong><br />
Alchemy Quest do not use any of your personal information</p>

<p><strong>Long version:</strong><br />
Alchemy Quest do not collect your personal information, do not contact any external service.<br />
You can play without Internet access.<br />
Alchemy Quest is a paying game and has no vocation to make money with your data.</p>

<h2 id="support">Support</h2>

<p>If you have any question or suggestion please contact me by mail at: jerome@gangneux.net</p>

<p><section id="gallery">
    <h2>Gallery</h2>
    <div class="mx-auto max-w-2xl mt-6">
        <div class="text-center">Click for more screenshots</div>
        <div class="shadow-2xl relative">
                        <div class="mySlides"><img class="image1 w-full w-full" src="/images/projects/AlchemyQuest/iphone/App-Store-Images-01.png"></div>
                        <div class="mySlides"><img class="image2 w-full w-full" src="/images/projects/AlchemyQuest/iphone/App-Store-Images-02.png"></div>
                        <div class="mySlides"><img class="image3 w-full w-full" src="/images/projects/AlchemyQuest/iphone/App-Store-Images-03.png"></div>
                        <div class="mySlides"><img class="image4 w-full w-full" src="/images/projects/AlchemyQuest/iphone/App-Store-Images-04.png"></div>
                        <div class="mySlides"><img class="image5 w-full w-full" src="/images/projects/AlchemyQuest/iphone/App-Store-Images-05.png"></div>
                        <div class="mySlides"><img class="image6 w-full w-full" src="/images/projects/AlchemyQuest/iphone/App-Store-Images-06.png"></div>
                        <div class="mySlides"><img class="image7 w-full w-full" src="/images/projects/AlchemyQuest/iphone/App-Store-Images-07.png"></div>
                        <div class="mySlides"><img class="image8 w-full w-full" src="/images/projects/AlchemyQuest/iphone/App-Store-Images-08.png"></div>
                        <div class="mySlides"><img class="image9 w-full w-full" src="/images/projects/AlchemyQuest/iphone/App-Store-Images-09.png"></div>
                        <div class="mySlides"><img class="image10 w-full w-full" src="/images/projects/AlchemyQuest/iphone/App-Store-Images-10.png"></div>
                        <span class="absolute left-0 inset-y-0 flex items-center px-4 dark:text-pink-600 text-pink-500 cursor-pointer text-3xl font-extrabold" style="z-index: 11;" onclick="plusSlides(-1)">❮</span>
            <span class="absolute right-0 inset-y-0 flex items-center px-4 dark:text-pink-600 text-pink-500 cursor-pointer text-3xl font-extrabold" style="width: 100%;z-index: 10;justify-content: flex-end;" onclick="plusSlides(1)">❯</span>
        </div>
    </div>

    <script>
    var slideIndex = 1;
    showSlides(slideIndex);

    function plusSlides(n) { showSlides(slideIndex += n); return false; }
    function showSlides(n) {
        var i;
        var slides = document.getElementsByClassName("mySlides");
        if (n > slides.length) {
            slideIndex = 1
        }
        if (n < 1) {
            slideIndex = slides.length
        }
        for (i = 0; i < slides.length; i++) {
            slides[i].style.display = "none";
        }
        slides[slideIndex - 1].style.display = "block";
    }
    </script>
</section>
</p>
]]></content>
    </entry>
        <entry>
        <title type="html"><![CDATA[Thread Reader: Let&#039;s explore my tooling (technical post)]]></title>
        <link href="/2018/05/01/thread-reader-tools"/>
        <updated>2018-05-01T00:00:00+00:00</updated>
        <id>/2018/05/01/thread-reader-tools</id>
        <content type="html"><![CDATA[<p><strong>Note: This project has been acquired in 2018, I'm no longer the owner of ThreadReaderApp</strong></p>

<p><em>This is a technical article about Thread Reader,
for more context <a href="/posts/category/threadreader">see the whole series here</a></em></p>

<h1 id="hardware-and-server-stack">Hardware and Server Stack</h1>

<p>I have my own server from <a href="https://kimsufi.com">kimsufi.com</a> (Canada based).
It is an Intel i5 at 2.8GHz with 16GB RAM and 2TB of hard drive, Network is 100Mbps.</p>

<p>I use a very basic setup, with Apache2, PHP and MySQL under Ubuntu.
It has memcached for some caching layer, even if most of the content is cached on the hard drive.</p>

<p>I use Sphinx search to power the "related thread" feature as well as the search feature (obviously).</p>

<p>So, yes it is PHP + basic CSS (<a href="http://getbootstrap.com/">bootstrap</a>) + basic javascript (<a href="http://jquery.com/">jquery</a>).</p>

<h3 id="notable">Notable</h3>

<ul>
<li>I'm using the <a href="https://silex.symfony.com/">Silex</a> PHP micro framework and some Symfony components</li>
<li>PHP sessions are in memcached</li>
<li>Apache is configured to cache everything very violently</li>
<li>All this is backed by <a href="https://www.cloudflare.com/">Cloudflare</a> caching</li>
</ul>

<h3 id="server-metrics-as-may-2018">Server Metrics as May 2018</h3>

<ul>
<li>Average load is close to 0.3 and can go close to 1 when 800+ visits/minutes</li>
<li>The database is &lt; 2Gb and the whole hard drive caching + code is about 25Gb</li>
<li>RAM is half used on a normal day, no swapping</li>
</ul>

<h1 id="monitoring">Monitoring</h1>

<p>To monitor the server I mostly use cron jobs that check for specific signals:</p>

<ul>
<li>I check the size of the job queue</li>
<li>I check that the bot has said something in the last hour</li>
</ul>

<p>If something is wrong I get an email, I also have a basic alert mechanism from Kimsufi when the server is down.</p>

<p>On my laptop, I have a term open on my server with a <code>tail -f</code> on logs (I use SSH + <a href="https://mosh.org/">mosh</a>).</p>

<p>Logs include many things: payments hooks, Apache errors, bot mentions and replies, job outputs and more.<br />
These logs are also accessible on the web via an admin page I have access to.</p>

<h2 id="in-case-of-emergency">In case of emergency</h2>

<p>If something goes wrong about performance I use:</p>

<ul>
<li><code>top</code> to check CPU and RAM usage</li>
<li><code>iotop</code> to check disk usage</li>
<li><code>iftop</code> to check network usage</li>
</ul>

<p>Most of the time it is not a performance issue but more a bug that cause some edge case.</p>

<p>For example last one was some thread that was unrolled and posted on Twitter,
got something like 300 RT and then the author deleted the thread. 
So any visitor would arrive at the thread page but nothing was found on the database 
and so the bot tried to unroll it but it was not on Twitter any more (times 1000 visits). Made a mess. Fixed now.</p>

<h2 id="web-admin-interface">Web Admin interface</h2>

<p>I made an admin interface with the minimum to do some monitoring about the service (not the server).</p>

<ul>
<li>I can get the last unrolls and trending pages.</li>
<li>I can check user details, and upgrade to Premium</li>
<li>I can do some action on threads like force refresh for example.</li>
</ul>

<h1 id="scripts-and-crons">Scripts and Crons</h1>

<p>I have plenty of scripts and Crons that runs on the server:</p>

<pre><code>21 3 * * * /threadreader/cron/CheckUser.php &gt; /logs/cron.log
45 4 * * * /threadreader/cron/CheckThread.php &gt; /logs/cron.log
0 8 * * * /threadreader/cron/UsageReporting.php &gt; /logs/cron.log
0 8 * * * /threadreader/cron/MoneyReporting.php &gt; /logs/cron.log
0 8 2 * * /threadreader/cron/MoneyReporting.php --period=month &gt; /logs/cron.log
17 */3 * * * /threadreader/cron/StaticTrending.php &gt; /logs/cron.log
10 * * * * /threadreader/cron/Health.php &gt; /logs/cron.log
</code></pre>

<p>I have two more Cron: database backup and software updates running every day.</p>

<p>Then I have all these scripts that loops all the time with sometime a bit of waiting <code>sleep</code>.
These are started in a <code>screen</code> that is configured to auto start if the server reboots (never happened)</p>

<ul>
<li>Check for bot mentions</li>
<li>Update existing threads</li>
<li>Check for deleted threads</li>
<li>Check for deleted users</li>
<li>Run jobs</li>
</ul>

<h2 id="queue-and-job-mechanism">Queue and job mechanism</h2>

<p>Thread Reader needs a queuing mechanism for two reasons:<br />
long processing jobs (like thread archiving) and relative scheduled actions (DM/emails alerts)</p>

<p>This one is so low tech that I'm almost ashamed to talk about but...</p>

<p>It is a MySQL table where I enqueue a command name with its arguments, 
I add the time when I want it to be executed and a return code to check later.<br />
Then a script pulls entries one by one and execute them.</p>

<h1 id="backup-and-security">Backup and security</h1>

<ul>
<li>SSH via public key and no root</li>
<li>Every port closed (via <code>ufw</code>) except ssh and http/s</li>
<li>Apache and PHP are configured with paranoia in mind</li>
</ul>

<p>Thread Reader is quite a special case about data as it does not have so much content, nor original content.<br />
Still. A full dump of the database is saved every day (cron script), 
encrypted and sync to <a href="https://dropbox.com">dropbox.com</a> (true)<br />
No other data are saved as it is only caching.</p>

<h1 id="external-services-and-tools">External Services and Tools</h1>

<p>For thread reader I only use a few external services:</p>

<ul>
<li><a href="https://www.mailgun.com/">Mail Gun</a> to send emails: I chose them because the registration was the most straight forward and the pricing competitive.</li>
<li><a href="https://stripe.com">Stripe</a> to allow people to pay by Credit Card: They are the best for developers for sure.</li>
<li>Paypal so people can pay without giving any bank info: It is widely used even if it is a pain for developers.</li>
<li>Google Analytics and Google AdSense for analytics and ads.</li>
</ul>

<h2 id="support-and-twitter-ecosystem">Support and Twitter ecosystem</h2>

<p>I use services to keep in touch with my users on Twitter:<br />
I did use <a href="https://tweetdeck.twitter.com/">Tweetdeck</a> 
but I changed to (the ugly) <a href="https://hootsuite.com/">Hootsuite</a> recently 
as they allow to see your DM inbox separately of the outbox.
This is very important because I use the same account for the support and the bot (it sends thousands of DM by day).</p>

<p>Most of the support is done by Twitter and email (inbox by Gmail setup with custom domain).</p>

<h2 id="development-software-and-services">Development Software and Services</h2>

<p>I have a private <a href="https://github.com">Github</a> repository for the code, 
I use the issue tracking and the project view to keep my TODOs.
I use github for deployment too, <code>master</code> is clean and get pulled on production every 5 minutes.</p>

<p>For big updates that need a database change I jump on the server and do the necessary manually. 
This is very rare as the service is quite well-structured now.</p>

<p>To connect to my database I use <a href="https://www.sequelpro.com/">Sequel Pro</a> via SSH, 
it has some custom options to plays nicely with the database (like not requesting full blobs etc).</p>

<h1 id="conclusion">Conclusion</h1>

<p>As you can see nothing fancy, it is good old technology.<br />
Boring working stuff.</p>

<p>I made a bunch of shell scripts to interact with Twitter API, but in general I am not in favor of making my own tools.</p>

<p>What I like in this setup is the performance: I get to handle 1000 people/minutes without to worry about anything,
I'm quite sure it can go up to 5000 before showing any sign of slowness.</p>

<p>All this for US$30/month</p>

<p><strong>
    Learn more about Thread Reader story in <a href="/posts/category/threadreader">the whole blog post series</a>.
</strong></p>
]]></content>
    </entry>
    </feed>